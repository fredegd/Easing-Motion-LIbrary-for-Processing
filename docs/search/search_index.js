var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"EasyEase library for Processing","text":"<p>Easing Function and non linear distribution utilities for Processing IDE</p> <p></p>"},{"location":"index.html#general-purpose","title":"General Purpose","text":"<p>EasyEase provides a ready-to-use setup in order to apply easing functions to a spatial distribution or an animations, .</p>"},{"location":"index.html#simple-and-intuitive","title":"SIMPLE  and  INTUITIVE","text":"<p>Designed to be small, yet full featured, EasyEase enables you to create more natural and visually appealing effects</p> <p>It has no external dependencies and In just a few lines of code you\u00b4re ready to go</p>"},{"location":"index.html#get-started-","title":"Get Started --&gt;","text":""},{"location":"about.html","title":"About EasyEase","text":""},{"location":"about.html#general-purpose","title":"General Purpose","text":"<p>The purpose of this library is to a have a ready-to-use setup in order to easily apply easing functions to a spatial distribution or an animations, .</p>"},{"location":"about.html#testedplatforms","title":"TestedPlatforms:","text":"<ul> <li>OS-X</li> <li>Windows</li> <li>Linux</li> </ul>"},{"location":"about.html#processing","title":"Processing:","text":"<p>The latest Processing version the library has been tested with: 4.3</p>"},{"location":"about.html#dependencies","title":"Dependencies:","text":"<p>EasyEase depends on no other libraries</p>"},{"location":"about.html#examples","title":"Examples:","text":"<p>Here is a list of all featured examples</p>"},{"location":"about.html#source","title":"Source","text":"<p>https://github.com/fredegd/EasyEase</p>"},{"location":"about.html#this-library-was-written-is-in-accordance-with-the-processing-library-guidelines","title":"This Library was written is in accordance with the Processing library guidelines","text":"<p>library guidelines</p>"},{"location":"about.html#keywords","title":"Keywords:","text":"<p>easing , motion, easing-curve, gradient, non-linear, curve, interpolation</p>"},{"location":"about.html#last-update","title":"Last update","text":"<p>February 2024</p>"},{"location":"about.html#issues","title":"Issues","text":"<p>Issues, unexpected bugs and behaviors, or any kind of suggestion or improvement is highly welcome and can be posted here</p>"},{"location":"about.html#troubleshooting","title":"Troubleshooting","text":"<p>If you're having trouble, have a look at the Processing Wiki for further information, please contact the author.</p>"},{"location":"about.html#references-and-inspiration","title":"References and Inspiration","text":"<p>Those sources did provide a lot of inspiration as well as a big amount of informative material which turned useful in creating this library</p> <ul> <li> <p>Easing Functions by Andrey Sitnik and Ivan Solovev</p> </li> <li> <p>Sighack: Easing Functions in Processing</p> </li> <li> <p>Sol_HSA: Easing Functions in Processing</p> </li> </ul> <p> </p>"},{"location":"constructors.html","title":"Constructor Functions","text":"<p>The EasyEase Class can be initialized in different ways, enhancing flexibility and customization</p> <p>There are 3 different constructor functions each of them initializes an instances of the Class according to the provided arguments</p>"},{"location":"constructors.html#constructor-1-default-constructor","title":"Constructor #1 - default constructor","text":"<p>Constructs an instance of the EasyEase Class expecting only <code>this</code>, a reference to the current Sketch, as a argument.</p> <p>It assigns default values for the global parameters like <code>intesity</code>, <code>totalLength</code>, <code>curveSpan</code>, and <code>delay</code>.</p>"},{"location":"constructors.html#example","title":"Example:","text":"constructor_01.pde<pre><code>import easy.ease.*;\n\n//construct an instance of the EaseEase Class called curve\n// using \"this\" as a reference to the current sketch\nEasyEase curve = new EasyEase(this);\n\nvoid setup() {\n    size(600, 400);\n    stroke(#ff0000);\n    noFill();\n    strokeWeight(3);\n\n    loadPixels();\n    for (float x = 0; x &lt; width; x++) {\n        for (float y = 0; y &lt; height; y++) {\n            int index = int(x + y * width);\n            color c = color(curve.inOutSine(x / width) * 255);\n            pixels[index] = c;\n        }\n    }\n    updatePixels();\n\n    beginShape();\n    for (float i = 0; i &lt; width; i++) {\n        vertex(i,(1 - curve.inOutSine((i / width))) * (height - 4) + 2);\n    }\n      endShape();\n    }\n</code></pre> <p>constructor_01.pde</p>"},{"location":"constructors.html#syntax","title":"Syntax","text":"<pre><code>EasyEase curve = new EasyEase( this );\n</code></pre>"},{"location":"constructors.html#parameters","title":"Parameters","text":"<p><code>this</code> (PApplet) the current sketch</p>"},{"location":"constructors.html#returns","title":"Returns","text":"<p>Object</p> <p> </p>"},{"location":"constructors.html#constructor-2-with-exponential-intensity","title":"Constructor #2 - with exponential intensity","text":"<p>Constructs an instance of the EasyEase Class expecting</p> <ul> <li><code>this</code> as a reference to the current sketch, and</li> <li>a <code>float</code> value for the <code>intensity</code></li> </ul> <p>as arguments.</p> <p>It assigns default values for other global parameters <code>intesity</code>, <code>totalLength</code>, <code>curveSpan</code>, and <code>delay</code>.</p>"},{"location":"constructors.html#example_1","title":"Example:","text":"constructor_02.pde<pre><code>import easy.ease.*;\n\n// construct an instance of the EaseEase Class called curve\n// passing \"this\" as a reference to the current sketch\n// and a float value for the intensity\nfloat intensity = 9.2;\nEasyEase curve = new EasyEase(this, intensity);\n\nvoid setup() {\n  size(600, 400);\n  stroke(#ff0000);\n  noFill();\n  strokeWeight(3);\n\n  loadPixels();\n  for (float x = 0; x &lt; width; x++) {\n    for (float y = 0; y &lt; height; y++) {\n      int index = int(x + y * width);\n      color c = color(curve.inOut( (x / width))*255);\n      pixels[index] = c;\n    }\n  }\n  updatePixels();\n\n\n  beginShape();\n  for (float i = 0; i &lt; width; i++) {\n    vertex(i, (1-curve.inOut( (i / width)))*(height-4)+2 );\n  }\n  endShape();\n}\n</code></pre> <p>constructor_02.pde</p>"},{"location":"constructors.html#syntax_1","title":"Syntax","text":"<pre><code>EasyEase curve = new EasyEase(this, intensity );\n</code></pre>"},{"location":"constructors.html#parameters_1","title":"Parameters","text":"<p><code>this</code> (PApplet) the current sketch</p> <p><code>intensity</code> (float) The intensity / exponential value of the easing curve.</p>"},{"location":"constructors.html#returns_1","title":"Returns","text":"<p>Object</p> <p> </p>"},{"location":"constructors.html#constructor-3-with-exponential-intensity-and-time-related-parameters","title":"Constructor #3 - with exponential intensity and time related parameters","text":"<p>Constructs an instance of the EasyEase Class expecting</p> <ul> <li><code>this</code> as a reference to the current sketch,</li> <li>a <code>float</code> value for the <code>intensity</code> ,</li> <li>a <code>float</code> value for the <code>totalLength</code> ,</li> <li>a <code>float</code> value for the <code>curveSpan</code> ,</li> <li>a <code>float</code> value for the <code>delay</code></li> </ul> <p>as arguments.</p>"},{"location":"constructors.html#example_2","title":"Example:","text":"constructor_03.pde<pre><code>import easy.ease.*;\n\n// construct an instance of the EaseEase Class called curve\n// passing \"this\" as a reference to the current sketch\n// and float values for the intensity, totalLength,\n// curveSpan and delay\n\nfloat intensity = 4.3;\nfloat totalLength = 1;\nfloat curveSpan = 0.4;\nfloat delay = 0.6;\n\nEasyEase curve = new EasyEase(this, intensity, totalLength, curveSpan, delay);\n\nvoid setup() {\n  size(600, 400);\n  stroke(#ff0000);\n  noFill();\n  strokeWeight(3);\n\n  loadPixels();\n  for (float x = 0; x &lt; width; x++) {\n    for (float y = 0; y &lt; height; y++) {\n      int index = int(x + y * width);\n      color c = color(curve.out( (x / width))*255);\n      pixels[index] = c;\n    }\n  }\n  updatePixels();\n\n\n  beginShape();\n  for (float i = 0; i &lt; width; i++) {\n    vertex(i, (1-curve.out( (i / width)))*(height-4)+2 );\n  }\n  endShape();\n}\n</code></pre> <p>constructor_03.pde</p>"},{"location":"constructors.html#syntax_2","title":"Syntax","text":"<pre><code>EasyEase curve = new EasyEase(this, intensity, totalLength, curveSpan, delay);\n</code></pre>"},{"location":"constructors.html#parameters_2","title":"Parameters","text":"<p><code>this</code> (PApplet) the current sketch</p> <p><code>intensity</code> (float) The intensity / exponential value of the easing curve.</p> <p><code>totalLength</code> (float) The total length (in seconds) of the interpolation / motion</p> <p><code>curveSpan</code> (float) The span (in seconds) of the easing curve.</p> <p><code>delay</code> (float) the delay (in seconds) before the curve starts bending</p>"},{"location":"constructors.html#returns_2","title":"Returns","text":"<p>Object</p> <p> </p>"},{"location":"examples.html","title":"Examples","text":"<p>here a list of all examples featured in this library.</p> <p>for further example, or improvement suggestion please reach out to the author.</p>"},{"location":"examples.html#basic-usage-and-cycling-options-examples","title":"Basic Usage and Cycling options examples","text":"<p>those sketches showcases the different Cycling options</p> Examples <ul> <li>basic_usage</li> <li><code>\"loop\"</code></li> <li><code>\"alternate\"</code></li> <li><code>\"once\"</code></li> <li><code>\"cycling_options\"</code></li> </ul>"},{"location":"examples.html#constructors-examples","title":"Constructors examples","text":"<p>some example Sketches related on how to construct and declare an EasyEase object</p> Examples <ul> <li>Constructor #01</li> <li>Constructor #02</li> <li>Constructor #03</li> </ul>"},{"location":"examples.html#tools-examples","title":"Tools examples","text":"<p>all the sketched used to demonstrate the various setter and helper functions</p> Examples <ul> <li><code>.setIntensity()</code>  using Exponential easing</li> <li><code>.setIntensity()</code>  using Circular easing</li> <li><code>.setIntensity()</code> using Back easing</li> <li><code>.setTotalLength()</code></li> <li><code>.setSpan()</code></li> <li><code>.setDelay()</code></li> <li><code>.setFrameRate()</code></li> <li><code>.framer()</code></li> <li><code>.linear()</code></li> </ul>"},{"location":"examples.html#easing-curve-examples","title":"Easing Curve examples","text":"<p>all the Sketches used to create the Curved easing representation of the overview Table</p> Examples <ul> <li>.in()</li> <li>.out()</li> <li>.inOut()</li> <li>.inCirc()</li> <li>.outCirc()</li> <li>.inOutCirc()</li> <li>.inBack()</li> <li>.outBack()</li> <li>.inOutBack()</li> <li>.inSine()</li> <li>.outSine()</li> <li>.inOutSine()</li> <li>.inElastic()</li> <li>.outElastic()</li> <li>.inOutElastic()</li> <li>.inBounce()</li> <li>.outBounce()</li> <li>.inOutBounce()</li> </ul>"},{"location":"examples.html#distribution-comparison-examples","title":"Distribution Comparison examples","text":"<p>comparing a non-linear distribution against a linear distribution</p> Examples <ul> <li>.in()</li> <li>.out()</li> <li>.inOut()</li> <li>.inCirc()</li> <li>.outCirc()</li> <li>.inOutCirc()</li> <li>.inBack()</li> <li>.outBack()</li> <li>.inOutBack()</li> <li>.inSine()</li> <li>.outSine()</li> <li>.inOutSine()</li> <li>.inElastic()</li> <li>.outElastic()</li> <li>.inOutElastic()</li> <li>.inBounce()</li> <li>.outBounce()</li> <li>.inOutBounce()</li> </ul>"},{"location":"examples.html#motion-comparison-examples","title":"Motion Comparison examples","text":"<p>comparing a motion with easing against a linear motion</p> Examples <ul> <li>.in()</li> <li>.out()</li> <li>.inOut()</li> <li>.inCirc()</li> <li>.outCirc()</li> <li>.inOutCirc()</li> <li>.inBack()</li> <li>.outBack()</li> <li>.inOutBack()</li> <li>.inSine()</li> <li>.outSine()</li> <li>.inOutSine()</li> <li>.inElastic()</li> <li>.outElastic()</li> <li>.inOutElastic()</li> <li>.inBounce()</li> <li>.outBounce()</li> <li>.inOutBounce()</li> </ul>"},{"location":"examples.html#demos","title":"Demos","text":"Examples <ul> <li>Array_Grid</li> <li>BUZZ_LIGHT</li> <li>Delay_Modulation</li> <li>MOUSE_CONTROLLED</li> <li>SHAKE_ROTATE_LIGHT</li> </ul>"},{"location":"getting-started.html","title":"Getting Started","text":""},{"location":"getting-started.html#prerequisites","title":"Prerequisites:","text":"<p>You need to have Processing installed in your machine.</p> <p></p>"},{"location":"getting-started.html#download","title":"Download:","text":"<p>You can download from here the latest release, including the library, documentation and examples. in .zip format</p> <p></p>"},{"location":"getting-started.html#installation","title":"Installation","text":""},{"location":"getting-started.html#opt1-manually-install","title":"opt.1: Manually install:","text":"<ul> <li> <p>Download the latest release of the library.</p> </li> <li> <p>Unzip / extract the content of EasyEase.zip into your Processing sketchbook's /libraries folder.</p> </li> </ul> <p>Tip</p> <p>sketchbook's /libraries folder is usually located under /User/Yourname/Documents/Processing/libraries. in order to view or change your sketchbook location go to: File &gt; Preferences. The \"sketchbook location\" setting is the first option of the dialog</p> <p></p>"},{"location":"getting-started.html#opt2-library-manager","title":"opt.2: Library manager","text":"<p>Open Processing, go-to: Sketch &gt; Import Library &gt; Manage Libraries &gt; EasyEase</p> <p>Info</p> <p>see also the Processing guidelines on How-to-Install-a-Contributed-Library</p> <p></p>"},{"location":"getting-started.html#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started.html#1-import-the-library","title":"1) Import the Library","text":"<p>Once correctly installed, import the library by selecting: Sketch &gt; Import Library &gt; EasyEase. Alternatively type <code>import easy.ease.*</code> at the beginning of your sketch.</p>"},{"location":"getting-started.html#2-declare-and-construct-objects-from-the-class-easyease","title":"2) Declare and construct objects from the Class EasyEase","text":"<p>An EasyEase Object should be declared globally using one of the available constructors It may be constructed inside or outside the sketch's <code>setup()</code> function</p>"},{"location":"getting-started.html#3-access-the-easing-methods","title":"3) Access the easing methods","text":"<p>Each EasyEase object contains a set of different easing methods as well as several build-in helper functions</p> <p></p>"},{"location":"getting-started.html#example","title":"Example:","text":"basic_usage.pde<pre><code>import easy.ease.*;\n\nfloat intensity = 9.2;\nEasyEase  curve = new EasyEase(this, intensity);\n\nvoid setup() {\n    size(600, 400);\n}\nvoid draw() {\n    float start = 100;\n    float stop = 400;\n    float framedCount = curve.framer(frameCount * 0.5);\n\n    float x = curve.inOut(framedCount, start, stop);\n    float y = curve.linear(framedCount, 0, height - 100);\n\n    fill(255, 0, 0);\n    rect(x, y, 100,100);\n}\n</code></pre> <p>basicUsage.pde</p> <p></p>"},{"location":"globalParameters.html","title":"Global Parameters","text":"<p>here is a list of all global parameters of an EasyEase object:</p>"},{"location":"globalParameters.html#intensity","title":"<code>intensity</code>","text":"<p>The <code>intensity</code> variable determines the curve-bending factor of Exponential, Back and Circular easing methods.</p> <p>By default it is set to 1.0.</p> <p>Custom values can be can be assigned</p> <ul> <li> <p>statically, during object initialization using the constructor #2 or #3 or</p> </li> <li> <p>dynamically using the .setIntensity method</p> </li> </ul> <p>Tip</p> <p>The input parameter can be any float value; ideal inputs might be between &gt;1 and 20sh.. to obtain a reasonable output;</p> <p>it applies: the higher the value, the sharper the curve</p> <ul> <li> <p>passing <code>0.0</code> will return <code>0.5</code> (in a range from <code>0</code> to <code>1</code>) for Exponential easing and Circular easing, or a gently shaped curve with no Back-bending for Back easing</p> </li> <li> <p>passing <code>1.0</code> will return a flat curve (in a range from 0 to 1)for Exponential easing and Circular easing, or a curve with a light Back-bending for Back easing</p> </li> <li> <p>passing a negative value (<code>&lt; 0</code>) might return unexpected although interesting outputs</p> </li> </ul> <p>setIntensity.pde</p> <p></p>"},{"location":"globalParameters.html#totallength","title":"<code>totalLength</code>","text":"<p>The <code>totalLength</code> variable determines the lenght of the easing curve, in other words: how many seconds should a motion cycle last.</p> <p>By default it is set to 1.0 second.</p> <p>Custom values can be can be assigned</p> <ul> <li> <p>statically, during object initialization using the constructor #3 or</p> </li> <li> <p>dynamically using the .setTotalLength method</p> </li> </ul> <p>setTotalLength.pde</p> <p></p>"},{"location":"globalParameters.html#span","title":"<code>span</code>","text":"<p>The <code>span</code> variable determines the length of the curve bending time, in other words: how many seconds should a motion last.</p> <p>By default it is set to 1 second, although it can be shortened and/or be combined with the <code>delay</code> parameter</p> <p>Custom values can be can be assigned</p> <ul> <li> <p>statically, during object initialization using the constructor #3 or</p> </li> <li> <p>dynamically using the .setSpan method</p> </li> </ul> <p>Info</p> <p>assigning a value lower than or equal to 0 is not allowed;    it will return a <code>WARNING</code> message to the console and automatically set the <code>span</code> to the least allowed value which is <code>totalLength / frameRate_</code></p> <p>assigning a value higher than <code>totalLength</code> parameter is not allowed; it will return a <code>WARNING</code> message to the console and will automatically set the same value as for the <code>totalLength</code> </p> <p>setSpan.pde</p> <p></p>"},{"location":"globalParameters.html#delay","title":"<code>delay</code>","text":"<p>The <code>delay</code> variable determines the waiting time before the curve start bending, in other words: how many seconds before the motion starts</p> <p>By default it is set to 0 second, so there is no delay although it can be customized and/or be combined with the <code>span</code> parameter</p> <p>Custom values can be can be passed</p> <ul> <li> <p>statically, during object initialization using the constructor #3 or</p> </li> <li> <p>dynamically using the .setDelay method</p> </li> </ul> <p>Info</p> <p>assigning a value higher than <code>totalLength</code> parameter is not allowed and will return a <code>ERROR</code> message to the console</p> <p>setDelay.pde</p> <p></p>"},{"location":"globalParameters.html#framerate_","title":"frameRate_","text":"<p>The <code>frameRate_</code> variable specifies the amount of frames per second the easing motion should be divided to By default it is set at 60 fps like the default sketch's framerate</p> <p>Custom values can be can be assigned</p> <ul> <li> <p>statically, during object initialization using the constructor #3 or</p> </li> <li> <p>dynamically using the .seFrameRate method</p> </li> </ul> <p>Info</p> <p>When setting a custom <code>frameRate_</code> for the EasyEase object, please ensure to set the sketch's <code>frameRate</code> accordingly, in order to avoid synchronization errors.</p> <p>setFrameRate.pde</p>  the gif  above runs @20fps and is only for demonstration purpose   <p></p>"},{"location":"methods.html","title":"Easing Methods","text":""},{"location":"methods.html#overview-table-","title":"Overview Table --&gt;","text":"<p>Each EasyEase Object comes with a set of functional methods that reproduce the most common easing curves:</p> <ul> <li>Exponential easing</li> <li>Back easing</li> <li>Circular easing</li> <li>Sinusoidal easing</li> <li>Elastic easing</li> <li>Bounce easing</li> </ul>"},{"location":"methods.html#exponential-easing","title":"Exponential Easing","text":"<p>Exponential easing accelerates or decelerates motion based on the value of the exponential factor. the higher the factor, the steeper the curve</p>"},{"location":"methods.html#in","title":".in()","text":"<p>It starts slowly and progressively speeds up,</p>"},{"location":"methods.html#out","title":".out()","text":"<p>It starts fast and progressively slows down,</p>"},{"location":"methods.html#inout","title":".inOut()Exponential","text":"<p>It starts slow, accelerates until reaching full-speed at the midpoint, then and progressively slows down.</p> ease - in ease - out ease-in-out <p></p>"},{"location":"methods.html#back-easing","title":"Back Easing","text":"<p>Back easing incorporates a brief overshoot before settling into the target position. This method is characterized by a slight backward motion before moving forward, creating an effect similar to pulling back and releasing a spring.</p>"},{"location":"methods.html#inback","title":".inBack()","text":"<p>It starts slowly and progressively speeds up,</p>"},{"location":"methods.html#outback","title":".outBack()","text":"<p>It starts slowly and progressively speeds up,</p>"},{"location":"methods.html#inoutback","title":".inOutBack()Back","text":"<p>It starts slow, accelerates until reaching full-speed at the midpoint, then and progressively slows down.</p> ease - in ease - out ease-in-out <p></p>"},{"location":"methods.html#circular-easing","title":"Circular Easing","text":"<p>Circular easing follows a circular motion pattern. This method is characterized by its rounded curves</p>"},{"location":"methods.html#incirc","title":".inCirc()","text":"<p>It starts slowly and progressively speeds up,</p>"},{"location":"methods.html#outcirc","title":".outCirc()","text":"<p>It starts slowly and progressively speeds up,</p>"},{"location":"methods.html#inoutcirc","title":".inOutCirc()Circular","text":"<p>It starts slow, accelerates until reaching full-speed at the midpoint, then and progressively slows down.</p> ease - in ease - out ease-in-out <p></p>"},{"location":"methods.html#sinusoidal-easing","title":"Sinusoidal Easing","text":"<p>Sinusoidal easing applies a sinusoidal function to the motion, resulting in a smooth, wave-like transition, providing a gentle acceleration and deceleration.</p>"},{"location":"methods.html#insine","title":".inSine()","text":"<p>It starts slowly and progressively speeds up,</p>"},{"location":"methods.html#outsine","title":".outSine()","text":"<p>It starts slowly and progressively speeds up,</p>"},{"location":"methods.html#inoutsine","title":".inOutSine()Sinusoidal","text":"<p>It starts slow, accelerates until reaching full-speed at the midpoint, then and progressively slows down.</p> ease - in ease - out ease-in-out <p></p>"},{"location":"methods.html#elastic-easing","title":"Elastic Easing","text":"<p>Elastic easing simulates an elastic or rubber band-like motion, causing the object to overshoot its target before settling into the final position. This method is useful for creating bouncy animations.</p>"},{"location":"methods.html#inelastic","title":".inElastic()","text":"<p>It starts slowly and progressively speeds up,</p>"},{"location":"methods.html#outelastic","title":".outElastic()","text":"<p>It starts slowly and progressively speeds up,</p>"},{"location":"methods.html#inoutelastic","title":".inOutElastic()Elastic","text":"<p>It starts slow, accelerates until reaching full-speed at the midpoint, then and progressively slows down.</p> ease - in ease - out ease-in-out <p></p>"},{"location":"methods.html#bounce-easing","title":"Bounce Easing","text":"<p>Bounce easing mimics the behavior of a bouncing ball, introducing a series of bounces as the motion progresses. This method adds a dynamic animation, resembling the way objects bounce in the real world.</p>"},{"location":"methods.html#inbounce","title":".inBounce()","text":"<p>It starts slowly and progressively speeds up,</p>"},{"location":"methods.html#outbounce","title":".outBounce()","text":"<p>It starts slowly and progressively speeds up,</p>"},{"location":"methods.html#inoutbounce","title":".inOutBounce()Bounce","text":"<p>It starts slow, accelerates until reaching full-speed at the midpoint, then and progressively slows down.</p> ease - in ease - out ease-in-out <p></p>"},{"location":"tools.html","title":"Tools","text":"<p>Each Object comes with a set of setter, getter and helper functions to get along with the internal variables or help with the calculation of incremental values</p>"},{"location":"tools.html#setter-functions","title":"Setter functions","text":""},{"location":"tools.html#setintensity","title":"<code>.setIntensity</code>","text":""},{"location":"tools.html#settotallength","title":"<code>.setTotalLength()</code>","text":""},{"location":"tools.html#setspan","title":"<code>.setSpan()</code>","text":""},{"location":"tools.html#setdelay","title":"<code>.setDelay()</code>","text":""},{"location":"tools.html#setframerate","title":"<code>.setFrameRate()</code>","text":""},{"location":"tools.html#getter-functions","title":"Getter functions","text":""},{"location":"tools.html#getintensity","title":"<code>.getIntensity()</code>","text":""},{"location":"tools.html#gettotallength","title":"<code>.getTotalLength()</code>","text":""},{"location":"tools.html#getspan","title":"<code>.getSpan()</code>","text":""},{"location":"tools.html#getdelay","title":"<code>.getDelay()</code>","text":""},{"location":"tools.html#getframerate","title":"<code>.getFrameRate()</code>","text":""},{"location":"tools.html#helper-functions","title":"Helper functions","text":""},{"location":"tools.html#framer","title":"<code>.framer()</code>","text":""},{"location":"tools.html#linear","title":"<code>.linear()</code>","text":""},{"location":"tools.html#setlog","title":"<code>.setLog()</code>","text":""}]}