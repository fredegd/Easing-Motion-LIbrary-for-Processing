var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"EasyEase library for Processing","text":"<p>Easing Function and non linear distribution utilities for Processing IDE</p> <p></p>"},{"location":"index.html#general-purpose","title":"General Purpose","text":"<p>EasyEase provides a ready-to-use setup in order to apply easing functions to a spatial distribution or an animations, .</p>"},{"location":"index.html#simple-and-intuitive","title":"SIMPLE  and  INTUITIVE","text":"<p>Designed to be small, yet full featured, EasyEase enables you to create more natural and visually appealing effects</p> <p>It has no external dependencies and In just a few lines of code you\u00b4re ready to go</p>"},{"location":"index.html#get-started-","title":"Get Started --&gt;","text":""},{"location":"about.html","title":"About EasyEase","text":""},{"location":"about.html#general-purpose","title":"General Purpose","text":"<p>The purpose of this library is to a have a ready-to-use setup in order to easily apply easing functions to a spatial distribution or an animations, .</p>"},{"location":"about.html#testedplatforms","title":"TestedPlatforms:","text":"<ul> <li>OS-X</li> <li>Windows</li> <li>Linux</li> </ul>"},{"location":"about.html#processing","title":"Processing:","text":"<p>The latest Processing version the library has been tested with: 4.1.1</p>"},{"location":"about.html#dependencies","title":"Dependencies:","text":"<p>EasyEase depends on no other libraries</p>"},{"location":"about.html#examples","title":"Examples:","text":"<p>Here is a list of all featured examples</p>"},{"location":"about.html#source","title":"Source","text":"<p>https://github.com/fredegd/EasyEase</p>"},{"location":"about.html#this-library-was-written-is-in-accordance-with-the-processing-library-guidelines","title":"This Library was written is in accordance with the Processing library guidelines","text":"<p>library guidelines</p>"},{"location":"about.html#keywords","title":"Keywords:","text":"<p>easing , motion, easing-curve, gradient, non-linear, curve, interpolation</p>"},{"location":"about.html#last-update","title":"Last update","text":"<p>February 2024</p>"},{"location":"about.html#issues","title":"Issues","text":"<p>Issues, unexpected bugs and behaviors, or any kind of suggestion or improvement is highly welcome and can be posted here</p>"},{"location":"about.html#troubleshooting","title":"Troubleshooting","text":"<p>If you're having trouble, have a look at the Processing Wiki for further information, please contact the author.</p>"},{"location":"about.html#references-and-inspiration","title":"References and Inspiration","text":"<p>Those sources did provide a lot of inspiration as well as a big amount of informative material which turned useful in creating this library</p> <ul> <li> <p>Easing Functions by Andrey Sitnik and Ivan Solovev</p> </li> <li> <p>Sighack: Easing Functions in Processing</p> </li> <li> <p>Sol_HSA: Easing Functions in Processing</p> </li> </ul> <p> </p>"},{"location":"constructors.html","title":"Constructor Functions","text":"<p>The EasyEase Class can be initialized in different ways, enhancing flexibility and customization</p> <p>There are 3 different constructor functions each of them initializes an instances of the Class according to the provided arguments</p>"},{"location":"constructors.html#constructor-1-default-constructor","title":"Constructor #1 - default constructor","text":"<p>Constructs an instance of the EasyEase Class expecting only <code>this</code>, a reference to the current Sketch, as a argument.</p> <p>It assigns default values for the global parameters like <code>intesity</code>, <code>totalLength</code>, <code>curveSpan</code>, and <code>delay</code>.</p>"},{"location":"constructors.html#example","title":"Example:","text":"constructor_01.pde<pre><code>import easy.ease.*;\n\n//construct an instance of the EaseEase Class called curve\n// using \"this\" as a reference to the current sketch\nEasyEase curve = new EasyEase(this);\n\nvoid setup() {\n    size(600, 400);\n    stroke(#ff0000);\n    noFill();\n    strokeWeight(3);\n\n    loadPixels();\n    for (float x = 0; x &lt; width; x++) {\n        for (float y = 0; y &lt; height; y++) {\n            int index = int(x + y * width);\n            color c = color(curve.inOutSine(x / width) * 255);\n            pixels[index] = c;\n        }\n    }\n    updatePixels();\n\n    beginShape();\n    for (float i = 0; i &lt; width; i++) {\n        vertex(i,(1 - curve.inOutSine((i / width))) * (height - 4) + 2);\n    }\n      endShape();\n    }\n</code></pre> <p>constructor_01.pde</p>"},{"location":"constructors.html#syntax","title":"Syntax","text":"<pre><code>EasyEase curve = new EasyEase( this );\n</code></pre>"},{"location":"constructors.html#parameters","title":"Parameters","text":"<p><code>this</code> (PApplet) the current sketch</p>"},{"location":"constructors.html#returns","title":"Returns","text":"<p>Object</p> <p> </p>"},{"location":"constructors.html#constructor-2-with-exponential-intensity","title":"Constructor #2 - with exponential intensity","text":"<p>Constructs an instance of the EasyEase Class expecting</p> <ul> <li><code>this</code> as a reference to the current sketch, and</li> <li>a <code>float</code> value for the <code>intensity</code></li> </ul> <p>as arguments.</p> <p>It assigns default values for other global parameters <code>intesity</code>, <code>totalLength</code>, <code>curveSpan</code>, and <code>delay</code>.</p>"},{"location":"constructors.html#example_1","title":"Example:","text":"constructor_02.pde<pre><code>import easy.ease.*;\n\n// construct an instance of the EaseEase Class called curve\n// passing \"this\" as a reference to the current sketch\n// and a float value for the intensity\nfloat intensity = 9.2;\nEasyEase curve = new EasyEase(this, intensity);\n\nvoid setup() {\n  size(600, 400);\n  stroke(#ff0000);\n  noFill();\n  strokeWeight(3);\n\n  loadPixels();\n  for (float x = 0; x &lt; width; x++) {\n    for (float y = 0; y &lt; height; y++) {\n      int index = int(x + y * width);\n      color c = color(curve.inOut( (x / width))*255);\n      pixels[index] = c;\n    }\n  }\n  updatePixels();\n\n\n  beginShape();\n  for (float i = 0; i &lt; width; i++) {\n    vertex(i, (1-curve.inOut( (i / width)))*(height-4)+2 );\n  }\n  endShape();\n}\n</code></pre> <p>constructor_02.pde</p>"},{"location":"constructors.html#syntax_1","title":"Syntax","text":"<pre><code>EasyEase curve = new EasyEase(this, intensity );\n</code></pre>"},{"location":"constructors.html#parameters_1","title":"Parameters","text":"<p><code>this</code> (PApplet) the current sketch</p> <p><code>intensity</code> (float) The intensity / exponential value of the easing curve.</p>"},{"location":"constructors.html#returns_1","title":"Returns","text":"<p>Object</p> <p> </p>"},{"location":"constructors.html#constructor-3-with-exponential-intensity-and-time-related-parameters","title":"Constructor #3 - with exponential intensity and time related parameters","text":"<p>Constructs an instance of the EasyEase Class expecting</p> <ul> <li><code>this</code> as a reference to the current sketch,</li> <li>a <code>float</code> value for the <code>intensity</code> ,</li> <li>a <code>float</code> value for the <code>totalLength</code> ,</li> <li>a <code>float</code> value for the <code>curveSpan</code> ,</li> <li>a <code>float</code> value for the <code>delay</code></li> </ul> <p>as arguments.</p>"},{"location":"constructors.html#example_2","title":"Example:","text":"constructor_03.pde<pre><code>import easy.ease.*;\n\n// construct an instance of the EaseEase Class called curve\n// passing \"this\" as a reference to the current sketch\n// and float values for the intensity, totalLength,\n// curveSpan and delay\n\nfloat intensity = 4.3;\nfloat totalLength = 1;\nfloat curveSpan = 0.4;\nfloat delay = 0.6;\n\nEasyEase curve = new EasyEase(this, intensity, totalLength, curveSpan, delay);\n\nvoid setup() {\n  size(600, 400);\n  stroke(#ff0000);\n  noFill();\n  strokeWeight(3);\n\n  loadPixels();\n  for (float x = 0; x &lt; width; x++) {\n    for (float y = 0; y &lt; height; y++) {\n      int index = int(x + y * width);\n      color c = color(curve.out( (x / width))*255);\n      pixels[index] = c;\n    }\n  }\n  updatePixels();\n\n\n  beginShape();\n  for (float i = 0; i &lt; width; i++) {\n    vertex(i, (1-curve.out( (i / width)))*(height-4)+2 );\n  }\n  endShape();\n}\n</code></pre> <p>constructor_03.pde</p>"},{"location":"constructors.html#syntax_2","title":"Syntax","text":"<pre><code>EasyEase curve = new EasyEase(this, intensity, totalLength, curveSpan, delay);\n</code></pre>"},{"location":"constructors.html#parameters_2","title":"Parameters","text":"<p><code>this</code> (PApplet) the current sketch</p> <p><code>intensity</code> (float) The intensity / exponential value of the easing curve.</p> <p><code>totalLength</code> (float) The total length (in seconds) of the interpolation / motion</p> <p><code>curveSpan</code> (float) The span (in seconds) of the easing curve.</p> <p><code>delay</code> (float) the delay (in seconds) before the curve starts bending</p>"},{"location":"constructors.html#returns_2","title":"Returns","text":"<p>Object</p> <p> </p>"},{"location":"examples.html","title":"Examples","text":"<p>here a list of all examples featured in this library.</p> <p>for further example, or improvement suggestion please reach out to the  author.</p>"},{"location":"examples.html#constructors-examples","title":"Constructors examples","text":"Example <ul> <li>Constructor #01</li> <li>Constructor #02</li> <li>Constructor #03</li> </ul>"},{"location":"examples.html#basic-usage-and-cycling-options-examples","title":"Basic Usage and Cycling options examples","text":"Example <ul> <li>basic_usage</li> <li><code>\"loop\"</code></li> <li><code>\"alternate\"</code></li> <li><code>\"once\"</code></li> </ul>"},{"location":"examples.html#distribution-comparison-examples","title":"Distribution Comparison examples","text":"<p>comparing a non linear distribution  against a linear distribution</p> Example <ul> <li>.in()</li> <li>.out()</li> <li>.inOut()</li> <li>.inCirc()</li> <li>.outCirc()</li> <li>.inOutCirc()</li> <li>.inBack()</li> <li>.outBack()</li> <li>.inOutBack()</li> <li>.inSine()</li> <li>.outSine()</li> <li>.inOutSine()</li> <li>.inElastic()</li> <li>.outElastic()</li> <li>.inOutElastic()</li> <li>.inBounce()</li> <li>.outBounce()</li> <li>.inOutBounce()</li> </ul>"},{"location":"examples.html#motion-comparison-examples","title":"Motion Comparison  examples","text":"<p>comparing a motion with easing against a linear motion</p> Example <ul> <li>.in()</li> <li>.out()</li> <li>.inOut()</li> <li>.inCirc()</li> <li>.outCirc()</li> <li>.inOutCirc()</li> <li>.inBack()</li> <li>.outBack()</li> <li>.inOutBack()</li> <li>.inSine()</li> <li>.outSine()</li> <li>.inOutSine()</li> <li>.inElastic()</li> <li>.outElastic()</li> <li>.inOutElastic()</li> <li>.inBounce()</li> <li>.outBounce()</li> <li>.inOutBounce()</li> </ul>"},{"location":"examples.html#easing-curve-examples","title":"Easing Curve  examples","text":"Example <ul> <li>.in()</li> <li>.out()</li> <li>.inOut()</li> <li>.inCirc()</li> <li>.outCirc()</li> <li>.inOutCirc()</li> <li>.inBack()</li> <li>.outBack()</li> <li>.inOutBack()</li> <li>.inSine()</li> <li>.outSine()</li> <li>.inOutSine()</li> <li>.inElastic()</li> <li>.outElastic()</li> <li>.inOutElastic()</li> <li>.inBounce()</li> <li>.outBounce()</li> <li>.inOutBounce()</li> </ul>"},{"location":"examples.html#tools-examples","title":"Tools examples","text":"Example <ul> <li><code>.setIntensity()</code>  using Exponential easing</li> <li><code>.setIntensity()</code>  using Circular easing</li> <li><code>.setIntensity()</code> using Back easing</li> <li><code>.setTotalLength()</code></li> <li><code>.setSpan()</code></li> <li><code>.setDelay()</code></li> <li><code>.setFrameRate()</code></li> <li><code>.framer()</code></li> <li><code>.linear()</code></li> </ul>"},{"location":"examples.html#various-examples","title":"Various Examples","text":"Example <ul> <li>Array_Grid</li> <li>BUZZ_LIGHT</li> <li>Delay_Modulation</li> <li>MOUSE_CONTROLLED</li> <li>SHAKE_ROTATE_LIGHT</li> </ul>"},{"location":"getting-started.html","title":"Getting Started","text":""},{"location":"getting-started.html#prerequisites","title":"Prerequisites:","text":"<p>You need to have Processing installed in your machine.</p> <p></p>"},{"location":"getting-started.html#download","title":"Download:","text":"<p>You can download from here the latest release, including the library, documentation and examples. in .zip format</p> <p></p>"},{"location":"getting-started.html#installation","title":"Installation","text":""},{"location":"getting-started.html#opt1-manually-install","title":"opt.1: Manually install:","text":"<ul> <li> <p>Download the latest release of the library.</p> </li> <li> <p>Unzip / extract the content of EasyEase.zip into your Processing sketchbook's /libraries folder.</p> </li> </ul> <p>Tip</p> <p>sketchbook's /libraries folder is usually located under /User/Yourname/Documents/Processing/libraries. in order to view or change your sketchbook location go to: File &gt; Preferences. The \"sketchbook location\" setting is the first option of the dialog</p> <p></p>"},{"location":"getting-started.html#opt2-library-manager","title":"opt.2: Library manager","text":"<p>Open Processing, go-to: Sketch &gt; Import Library &gt; Manage Libraries &gt; EasyEase</p> <p>Info</p> <p>see also the Processing guidelines on How-to-Install-a-Contributed-Library</p> <p></p>"},{"location":"getting-started.html#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started.html#1-import-the-library","title":"1) Import the Library","text":"<p>Once correctly installed, import the library by selecting: Sketch &gt; Import Library &gt; EasyEase. Alternatively type <code>import easy.ease.*</code> at the beginning of your sketch.</p>"},{"location":"getting-started.html#2-declare-and-construct-objects-from-the-class-easyease","title":"2) Declare and construct objects from the Class EasyEase","text":"<p>An EasyEase Object should be declared globally using one of the available constructors It may be constructed inside or outside the sketch's <code>setup()</code> function</p>"},{"location":"getting-started.html#3-access-the-easing-methods","title":"3) Access the easing methods","text":"<p>Each EasyEase object contains a set of different easing methods as well as several build-in helper functions</p> <p></p>"},{"location":"getting-started.html#example","title":"Example:","text":"basic_usage.pde<pre><code>import easy.ease.*;\n\nfloat intensity = 9.2;\nEasyEase  curve = new EasyEase(this, intensity);\n\nvoid setup() {\n    size(600, 400);\n}\nvoid draw() {\n    float start = 100;\n    float stop = 400;\n    float framedCount = curve.framer(frameCount * 0.5);\n\n    float x = curve.inOut(framedCount,start, stop);\n    float y = curve.linear(framedCount,0, height - 100);\n\n    fill(255, 0, 0);\n    rect(x, y, 100,100);\n}\n</code></pre> <p>basicUsage.pde</p> <p></p>"},{"location":"globalParameters.html","title":"Global Parameters","text":"<p>here is a list of all global parameters of an EasyEase object:</p>"},{"location":"globalParameters.html#intensity","title":"<code>intensity</code>","text":"<p>The <code>intensity</code> variable determines the curve-bending factor of Exponential, Back and Circular easing methods.</p> <p>By default it is set to 1.0.</p> <p>Custom values can be can be assigned</p> <ul> <li> <p>statically, during object initialization using the constructor #2 or #3 or</p> </li> <li> <p>dynamically using the .setIntensity method</p> </li> </ul> <p>Tip</p> <p>The input parameter can be any float value; ideal inputs might be between &gt;1 and 20sh.. to obtain a reasonable output;</p> <p>it applies: the higher the value, the sharper the curve</p> <ul> <li> <p>passing <code>0.0</code> will return <code>0.5</code> (in a range from <code>0</code> to <code>1</code>) for Exponential easing and Circular easing, or a gently shaped curve with no Back-bending for Back easing</p> </li> <li> <p>passing <code>1.0</code> will return a flat curve (in a range from 0 to 1)for Exponential easing and Circular easing, or a curve with a light Back-bending for Back easing</p> </li> <li> <p>passing a negative value (<code>&lt; 0</code>) might return unexpected although interesting outputs</p> </li> </ul> <p>setIntensity.pde</p> <p></p>"},{"location":"globalParameters.html#totallength","title":"<code>totalLength</code>","text":"<p>The <code>totalLength</code> variable determines the lenght of the easing curve, in other words: how many seconds should a motion cycle last.</p> <p>By default it is set to 1.0 second.</p> <p>Custom values can be can be assigned</p> <ul> <li> <p>statically, during object initialization using the constructor #3 or</p> </li> <li> <p>dynamically using the .setTotalLength method</p> </li> </ul> <p>setTotalLength.pde</p> <p></p>"},{"location":"globalParameters.html#span","title":"<code>span</code>","text":"<p>The <code>span</code> variable determines the length of the curve bending time, in other words: how many seconds should a motion last.</p> <p>By default it is set to 1 second, although it can be shortened and/or be combined with the <code>delay</code> parameter</p> <p>Custom values can be can be assigned</p> <ul> <li> <p>statically, during object initialization using the constructor #3 or</p> </li> <li> <p>dynamically using the .setSpan method</p> </li> </ul> <p>Info</p> <p>assigning a value lower than or equal to 0 is not allowed;    it will return a <code>WARNING</code> message to the console and automatically set the <code>span</code> to the least allowed value which is <code>totalLength / frameRate_</code></p> <p>assigning a value higher than <code>totalLength</code> parameter is not allowed; it will return a <code>WARNING</code> message to the console and will automatically set the same value as for the <code>totalLength</code> </p> <p>setSpan.pde</p> <p></p>"},{"location":"globalParameters.html#delay","title":"<code>delay</code>","text":"<p>The <code>delay</code> variable determines the waiting time before the curve start bending, in other words: how many seconds before the motion starts</p> <p>By default it is set to 0 second, so there is no delay although it can be customized and/or be combined with the <code>span</code> parameter</p> <p>Custom values can be can be passed</p> <ul> <li> <p>statically, during object initialization using the constructor #3 or</p> </li> <li> <p>dynamically using the .setDelay method</p> </li> </ul> <p>Info</p> <p>assigning a value higher than <code>totalLength</code> parameter is not allowed and will return a <code>ERROR</code> message to the console</p> <p>setDelay.pde</p> <p></p>"},{"location":"globalParameters.html#framerate_","title":"frameRate_","text":"<p>The <code>frameRate_</code> variable specifies the amount of frames per second the easing motion should be divided to By default it is set at 60 fps like the default sketch's framerate</p> <p>Custom values can be can be assigned</p> <ul> <li> <p>statically, during object initialization using the constructor #3 or</p> </li> <li> <p>dynamically using the .seFrameRate method</p> </li> </ul> <p>Info</p> <p>When setting a custom <code>frameRate_</code> for the EasyEase object, please ensure to set the sketch's <code>frameRate</code> accordingly, in order to avoid synchronization errors.</p> <p>setFrameRate.pde</p>  the gif  above runs @20fps and is only for demonstration purpose   <p></p>"},{"location":"methods.html","title":"Easing Methods","text":""},{"location":"methods.html#overview-table-","title":"Overview Table --&gt;","text":"<p>Each EasyEase Object comes with a set of functional methods that reproduce the most common easing curves:</p> <ul> <li>Exponential easing</li> <li>Back easing</li> <li>Circular easing</li> <li>Sinusoidal easing</li> <li>Elastic easing</li> <li>Bounce easing</li> </ul>"},{"location":"methods.html#exponential-easing","title":"Exponential Easing","text":"<p>Exponential easing accelerates or decelerates motion based on the value of the exponential factor. the higher the factor, the steeper the curve</p>"},{"location":"methods.html#in","title":".in()","text":"<p>It starts slowly and progressively speeds up,</p>"},{"location":"methods.html#out","title":".out()","text":"<p>It starts fast and progressively slows down,</p>"},{"location":"methods.html#inout","title":".inOut()Exponential","text":"<p>It starts slow, accelerates until reaching full-speed at the midpoint, then and progressively slows down.</p> ease - in ease - out ease-in-out <p></p>"},{"location":"methods.html#back-easing","title":"Back Easing","text":"<p>Back easing incorporates a brief overshoot before settling into the target position. This method is characterized by a slight backward motion before moving forward, creating an effect similar to pulling back and releasing a spring.</p>"},{"location":"methods.html#inback","title":".inBack()","text":"<p>It starts slowly and progressively speeds up,</p>"},{"location":"methods.html#outback","title":".outBack()","text":"<p>It starts slowly and progressively speeds up,</p>"},{"location":"methods.html#inoutback","title":".inOutBack()Back","text":"<p>It starts slow, accelerates until reaching full-speed at the midpoint, then and progressively slows down.</p> ease - in ease - out ease-in-out <p></p>"},{"location":"methods.html#circular-easing","title":"Circular Easing","text":"<p>Circular easing follows a circular motion pattern. This method is characterized by its rounded curves</p>"},{"location":"methods.html#incirc","title":".inCirc()","text":"<p>It starts slowly and progressively speeds up,</p>"},{"location":"methods.html#outcirc","title":".outCirc()","text":"<p>It starts slowly and progressively speeds up,</p>"},{"location":"methods.html#inoutcirc","title":".inOutCirc()Circular","text":"<p>It starts slow, accelerates until reaching full-speed at the midpoint, then and progressively slows down.</p> ease - in ease - out ease-in-out <p></p>"},{"location":"methods.html#sinusoidal-easing","title":"Sinusoidal Easing","text":"<p>Sinusoidal easing applies a sinusoidal function to the motion, resulting in a smooth, wave-like transition, providing a gentle acceleration and deceleration.</p>"},{"location":"methods.html#insine","title":".inSine()","text":"<p>It starts slowly and progressively speeds up,</p>"},{"location":"methods.html#outsine","title":".outSine()","text":"<p>It starts slowly and progressively speeds up,</p>"},{"location":"methods.html#inoutsine","title":".inOutSine()Sinusoidal","text":"<p>It starts slow, accelerates until reaching full-speed at the midpoint, then and progressively slows down.</p> ease - in ease - out ease-in-out <p></p>"},{"location":"methods.html#elastic-easing","title":"Elastic Easing","text":"<p>Elastic easing simulates an elastic or rubber band-like motion, causing the object to overshoot its target before settling into the final position. This method is useful for creating bouncy animations.</p>"},{"location":"methods.html#inelastic","title":".inElastic()","text":"<p>It starts slowly and progressively speeds up,</p>"},{"location":"methods.html#outelastic","title":".outElastic()","text":"<p>It starts slowly and progressively speeds up,</p>"},{"location":"methods.html#inoutelastic","title":".inOutElastic()Elastic","text":"<p>It starts slow, accelerates until reaching full-speed at the midpoint, then and progressively slows down.</p> ease - in ease - out ease-in-out <p></p>"},{"location":"methods.html#bounce-easing","title":"Bounce Easing","text":"<p>Bounce easing mimics the behavior of a bouncing ball, introducing a series of bounces as the motion progresses. This method adds a dynamic animation, resembling the way objects bounce in the real world.</p>"},{"location":"methods.html#inbounce","title":".inBounce()","text":"<p>It starts slowly and progressively speeds up,</p>"},{"location":"methods.html#outbounce","title":".outBounce()","text":"<p>It starts slowly and progressively speeds up,</p>"},{"location":"methods.html#inoutbounce","title":".inOutBounce()Bounce","text":"<p>It starts slow, accelerates until reaching full-speed at the midpoint, then and progressively slows down.</p> ease - in ease - out ease-in-out <p></p>"},{"location":"tools.html","title":"Tools","text":"<p>Each Object comes with a set of setter, getter and helper functions to get along with the internal variables or help with the calculation of incremental values</p>"},{"location":"tools.html#setter-functions","title":"setter functions","text":""},{"location":"tools.html#setintensity","title":"<code>.setIntensity</code>","text":""},{"location":"tools.html#settotallength","title":"<code>.setTotalLength()</code>","text":""},{"location":"tools.html#setspan","title":"<code>.setSpan()</code>","text":""},{"location":"tools.html#setdelay","title":"<code>.setDelay()</code>","text":""},{"location":"tools.html#setframerate","title":"<code>.setFrameRate()</code>","text":""},{"location":"tools.html#getter-functions","title":"Getter functions","text":""},{"location":"tools.html#getintensity","title":"<code>.getIntensity()</code>","text":""},{"location":"tools.html#gettotallength","title":"<code>.getTotalLength()</code>","text":""},{"location":"tools.html#getspan","title":"<code>.getSpan()</code>","text":""},{"location":"tools.html#getdelay","title":"<code>.getDelay()</code>","text":""},{"location":"tools.html#getframerate","title":"<code>.getFrameRate()</code>","text":""},{"location":"tools.html#helper-functions","title":"Helper functions","text":""},{"location":"tools.html#framer","title":"<code>.framer()</code>","text":""},{"location":"tools.html#linear","title":"<code>.linear()</code>","text":""},{"location":"tools.html#setlog","title":"<code>.setLog()</code>","text":""},{"location":"methods/inBack.html","title":".inBack()","text":"ease - in Back"},{"location":"methods/inBack.html#inback","title":"<code>.inBack()</code>","text":""},{"location":"methods/inBack.html#description","title":"Description","text":"<p>Calculates an ease-in-Back curve interpolation which starts slowly and progressively speeds up,</p> <p>In case a custom value was set for <code>totalLength</code>, the <code>counter</code> parameter should be tuned accordingly. e.g. if the total totalLength value was set to <code>3.0</code> seconds, the function will expect the <code>counter</code> parameter to be an incremental value between <code>0.0</code> and <code>3.0</code></p> <p>It returns by default a nonlinear interpolation between <code>0.0</code> and <code>1.0</code> or in case <code>start</code> and <code>stop</code> parameter are being passed to the function, it returns an interpolation between those two values</p> <p>when using the <code>\"alternate\"</code> option, the function expects the <code>counter</code> to be between <code>0.0</code> and twice the <code>totalLength</code></p> <p></p>"},{"location":"methods/inBack.html#example","title":"Example","text":"Ease_inBack.pde<pre><code>import easy.ease.*;\n\nfloat intensity = 4.0;\nfloat totalLength = 2;\nfloat span = 1.5;\nfloat delay = 0.25;\nEasyEase curve = new EasyEase(this, intensity, totalLength, span, delay);\n\nvoid setup() {\n  size(600, 400);\n}\n\nvoid draw() {\n  background(#f1f1f1);\n  fill(#ff0000);\n\n  float mot_counter = curve.framer(frameCount);\n  float x = curve.inBack(mot_counter ) * (width-100);\n  rect(x, 0, 100, width);\n}\n</code></pre> <p>Ease_in_back.pde</p> <p></p>"},{"location":"methods/inBack.html#syntax","title":"Syntax","text":"<p><code>.inBack(counter)</code></p> <p><code>.inBack(counter,option)</code></p> <p><code>.inBack(counter, start, stop)</code></p> <p><code>.inBack(counter, start, stop, option)</code></p> <p></p>"},{"location":"methods/inBack.html#parameters","title":"Parameters","text":"<p><code>counter</code> (float) an incremental value between 0 and <code>totalLength</code></p> <p><code>start</code> (float) the lowest desired output value</p> <p><code>stop</code> (float) the highest desired output value</p> <p><code>option</code> (String) either <code>\"loop\"</code> , <code>\"alternate\"</code> or <code>\"once\"</code></p> <p></p>"},{"location":"methods/inBack.html#return","title":"Return","text":"<p>float</p> <p></p>"},{"location":"methods/inBack.html#related","title":"Related","text":"<ul> <li>.framer()</li> </ul>"},{"location":"methods/inBounce.html","title":".inBounce()","text":"ease - in Bounce"},{"location":"methods/inBounce.html#inbounce","title":"<code>.inBounce()</code>","text":""},{"location":"methods/inBounce.html#description","title":"Description","text":"<p>Calculates an ease-in-Bounce curve interpolation which starts slowly and progressively speeds up,</p> <p>In case a custom value was set for <code>totalLength</code>, the <code>counter</code> parameter should be tuned accordingly. e.g. if the total totalLength value was set to <code>3.0</code> seconds, the function will expect the <code>counter</code> parameter to be an incremental value between <code>0.0</code> and <code>3.0</code></p> <p>It returns by default a nonlinear interpolation between <code>0.0</code> and <code>1.0</code> or in case <code>start</code> and <code>stop</code> parameter are being passed to the function, it returns an interpolation between those two values</p> <p>when using the <code>\"alternate\"</code> option, the function expects the <code>counter</code> to be between <code>0.0</code> and twice the <code>totalLength</code></p> <p></p>"},{"location":"methods/inBounce.html#example","title":"Example","text":"Ease_inBounce.pde<pre><code>import easy.ease.*;\n\nfloat intensity = 4.0;\nfloat totalLength = 2;\nfloat span = 1.5;\nfloat delay = 0.25;\nEasyEase curve = new EasyEase(this, intensity, totalLength, span, delay);\n\nvoid setup() {\n  size(600, 400);\n}\n\nvoid draw() {\n  background(#f1f1f1);\n  fill(#ff0000);\n\n  float mot_counter = curve.framer(frameCount);\n  float x = curve.inBounce(mot_counter ) * (width-100);\n  rect(x, 0, 100, width);\n}\n</code></pre> <p>Ease_in_bounce.pde</p> <p></p>"},{"location":"methods/inBounce.html#syntax","title":"Syntax","text":"<p><code>.inBounce(counter)</code></p> <p><code>.inBounce(counter,option)</code></p> <p><code>.inBounce(counter, start, stop)</code></p> <p><code>.inBounce(counter, start, stop, option)</code></p> <p></p>"},{"location":"methods/inBounce.html#parameters","title":"Parameters","text":"<p><code>counter</code> (float) an incremental value between 0 and <code>totalLength</code></p> <p><code>start</code> (float) the lowest desired output value</p> <p><code>stop</code> (float) the highest desired output value</p> <p><code>option</code> (String) either <code>\"loop\"</code> , <code>\"alternate\"</code> or <code>\"once\"</code></p> <p></p>"},{"location":"methods/inBounce.html#return","title":"Return","text":"<p>float</p> <p></p>"},{"location":"methods/inBounce.html#related","title":"Related","text":"<ul> <li>.framer()</li> </ul>"},{"location":"methods/inCirc.html","title":".inCirc()","text":"ease - in Circ"},{"location":"methods/inCirc.html#incirc","title":"<code>.inCirc()</code>","text":""},{"location":"methods/inCirc.html#description","title":"Description","text":"<p>Calculates an ease-in-Circular curve interpolation which starts slowly and progressively speeds up,</p> <p>In case a custom value was set for <code>totalLength</code>, the <code>counter</code> parameter should be tuned accordingly. e.g. if the total totalLength value was set to <code>3.0</code> seconds, the function will expect the <code>counter</code> parameter to be an incremental value between <code>0.0</code> and <code>3.0</code></p> <p>It returns by default a nonlinear interpolation between <code>0.0</code> and <code>1.0</code> or in case <code>start</code> and <code>stop</code> parameter are being passed to the function, it returns an interpolation between those two values</p> <p>when using the <code>\"alternate\"</code> option, the function expects the <code>counter</code> to be between <code>0.0</code> and twice the <code>totalLength</code></p> <p></p>"},{"location":"methods/inCirc.html#example","title":"Example","text":"Ease_inCirc.pde<pre><code>import easy.ease.*;\n\nfloat intensity = 4.0;\nfloat totalLength = 2;\nfloat span = 1.5;\nfloat delay = 0.25;\nEasyEase curve = new EasyEase(this, intensity, totalLength, span, delay);\n\nvoid setup() {\n  size(600, 400);\n}\n\nvoid draw() {\n  background(#f1f1f1);\n  fill(#ff0000);\n\n  float mot_counter = curve.framer(frameCount);\n  float x = curve.inCirc(mot_counter ) * (width-100);\n  rect(x, 0, 100, width);\n}\n</code></pre> <p>Ease_in_circ.pde</p> <p></p>"},{"location":"methods/inCirc.html#syntax","title":"Syntax","text":"<p><code>.inCirc(counter)</code></p> <p><code>.inCirc(counter,option)</code></p> <p><code>.inCirc(counter, start, stop)</code></p> <p><code>.inCirc(counter, start, stop, option)</code></p> <p></p>"},{"location":"methods/inCirc.html#parameters","title":"Parameters","text":"<p><code>counter</code> (float) an incremental value between 0 and <code>totalLength</code></p> <p><code>start</code> (float) the lowest desired output value</p> <p><code>stop</code> (float) the highest desired output value</p> <p><code>option</code> (String) either <code>\"loop\"</code> , <code>\"alternate\"</code> or <code>\"once\"</code></p> <p></p>"},{"location":"methods/inCirc.html#return","title":"Return","text":"<p>float </p>"},{"location":"methods/inCirc.html#related","title":"Related","text":"<ul> <li>.framer()</li> </ul>"},{"location":"methods/inElastic.html","title":".inElastic()","text":"ease - in Elastic"},{"location":"methods/inElastic.html#inelastic","title":"<code>.inElastic()</code>","text":""},{"location":"methods/inElastic.html#description","title":"Description","text":"<p>Calculates an ease-in-Elastic curve interpolation which starts slowly and progressively speeds up,</p> <p>In case a custom value was set for <code>totalLength</code>, the <code>counter</code> parameter should be tuned accordingly. e.g. if the total totalLength value was set to <code>3.0</code> seconds, the function will expect the <code>counter</code> parameter to be an incremental value between <code>0.0</code> and <code>3.0</code></p> <p>It returns by default a nonlinear interpolation between <code>0.0</code> and <code>1.0</code> or in case <code>start</code> and <code>stop</code> parameter are being passed to the function, it returns an interpolation between those two values</p> <p>when using the <code>\"alternate\"</code> option, the function expects the <code>counter</code> to be between <code>0.0</code> and twice the <code>totalLength</code></p> <p></p>"},{"location":"methods/inElastic.html#example","title":"Example","text":"Ease_inElastic.pde<pre><code>import easy.ease.*;\n\nfloat intensity = 4.0;\nfloat totalLength = 2;\nfloat span = 1.5;\nfloat delay = 0.25;\nEasyEase curve = new EasyEase(this, intensity, totalLength, span, delay);\n\nvoid setup() {\n  size(600, 400);\n}\n\nvoid draw() {\n  background(#f1f1f1);\n  fill(#ff0000);\n\n  float mot_counter = curve.framer(frameCount);\n  float x = curve.inElastic(mot_counter ) * (width-100);\n  rect(x, 0, 100, width);\n}\n</code></pre> <p>Ease_in_elastic.pde</p> <p></p>"},{"location":"methods/inElastic.html#syntax","title":"Syntax","text":"<p><code>.inElastic(counter)</code></p> <p><code>.inElastic(counter,option)</code></p> <p><code>.inElastic(counter, start, stop)</code></p> <p><code>.inElastic(counter, start, stop, option)</code></p> <p></p>"},{"location":"methods/inElastic.html#parameters","title":"Parameters","text":"<p><code>counter</code> (float) an incremental value between 0 and <code>totalLength</code></p> <p><code>start</code> (float) the lowest desired output value</p> <p><code>stop</code> (float) the highest desired output value</p> <p><code>option</code> (String) either <code>\"loop\"</code> , <code>\"alternate\"</code> or <code>\"once\"</code></p> <p></p>"},{"location":"methods/inElastic.html#return","title":"Return","text":"<p>float </p>"},{"location":"methods/inElastic.html#related","title":"Related","text":"<ul> <li>.framer()</li> </ul>"},{"location":"methods/inExpo.html","title":".in()","text":"ease - in Exponential"},{"location":"methods/inExpo.html#in","title":"<code>.in()</code>","text":""},{"location":"methods/inExpo.html#description","title":"Description","text":"<p>Calculates an ease-in Exponential curve interpolation which starts slowly and progressively speeds up,</p> <p>In case a custom value was set for <code>totalLength</code>, the <code>counter</code> parameter should be tuned accordingly. e.g. if the total totalLength value was set to <code>3.0</code> seconds, the function will expect the <code>counter</code> parameter to be an incremental value between <code>0.0</code> and <code>3.0</code></p> <p>It returns by default a nonlinear interpolation between <code>0.0</code> and <code>1.0</code> or in case <code>start</code> and <code>stop</code> parameter are being passed to the function, it returns an interpolation between those two values</p> <p>when using the <code>\"alternate\"</code> option, the function expects the <code>counter</code> to be between <code>0.0</code> and twice the <code>totalLength</code></p> <p></p>"},{"location":"methods/inExpo.html#example","title":"Example","text":"Ease_in.pde<pre><code>import easy.ease.*;\n\nfloat intensity = 4.0;\nfloat totalLength = 2;\nfloat span = 1.5;\nfloat delay = 0.25;\nEasyEase curve = new EasyEase(this, intensity, totalLength, span, delay);\n\nvoid setup() {\n  size(600, 400);\n}\n\nvoid draw() {\n  background(#f1f1f1);\n  fill(#ff0000);\n\n  float mot_counter = curve.framer(frameCount);\n  float x = curve.in(mot_counter ) * (width-100);\n  rect(x, 0, 100, width);\n}\n</code></pre> <p>Ease_in.pde</p> <p></p>"},{"location":"methods/inExpo.html#syntax","title":"Syntax","text":"<p><code>.in(counter)</code></p> <p><code>.in(counter,option)</code></p> <p><code>.in(counter, start, stop)</code></p> <p><code>.in(counter, start, stop, option)</code></p> <p></p>"},{"location":"methods/inExpo.html#parameters","title":"Parameters","text":"<p><code>counter</code> (float) an incremental value between 0 and <code>totalLength</code></p> <p><code>start</code> (float) the lowest desired output value</p> <p><code>stop</code> (float) the highest desired output value</p> <p><code>option</code> (String) either <code>\"loop\"</code> , <code>\"alternate\"</code> or <code>\"once\"</code></p> <p></p>"},{"location":"methods/inExpo.html#return","title":"Return","text":"<p>float </p>"},{"location":"methods/inExpo.html#related","title":"Related","text":"<ul> <li>.framer()</li> </ul>"},{"location":"methods/inOutBack.html","title":".inOutBack()","text":"ease - in - out Back"},{"location":"methods/inOutBack.html#inoutback","title":"<code>.inOutBack()</code>","text":""},{"location":"methods/inOutBack.html#description","title":"Description","text":"<p>Calculates an ease-in-out-Back curve interpolation which starts slow, accelerates to full-speed at the midpoint, then progressively slows down toward the end,</p> <p>In case a custom value was set for <code>totalLength</code>, the <code>counter</code> parameter should be tuned accordingly. e.g. if the total totalLength value was set to <code>3.0</code> seconds, the function will expect the <code>counter</code> parameter to be an incremental value between <code>0.0</code> and <code>3.0</code></p> <p>It returns by default a nonlinear interpolation between <code>0.0</code> and <code>1.0</code> or in case <code>start</code> and <code>stop</code> parameter are being passed to the function, it returns an interpolation between those two values</p> <p>when using the <code>\"alternate\"</code> option, the function expects the <code>counter</code> to be between <code>0.0</code> and twice the <code>totalLength</code></p> <p></p>"},{"location":"methods/inOutBack.html#example","title":"Example","text":"Ease_inOutBack.pde<pre><code>import easy.ease.*;\n\nfloat intensity = 4.0;\nfloat totalLength = 2;\nfloat span = 1.5;\nfloat delay = 0.25;\nEasyEase curve = new EasyEase(this, intensity, totalLength, span, delay);\n\nvoid setup() {\n  size(600, 400);\n}\n\nvoid draw() {\n  background(#f1f1f1);\n  fill(#ff0000);\n\n  float mot_counter = curve.framer(frameCount);\n  float x = curve.inOutBack(mot_counter ) * (width-100);\n  rect(x, 0, 100, width);\n}\n</code></pre> <p>Ease_in_out_back.pde</p> <p></p>"},{"location":"methods/inOutBack.html#syntax","title":"Syntax","text":"<p><code>.inOutBack(counter)</code></p> <p><code>.inOutBack(counter,option)</code></p> <p><code>.inOutBack(counter, start, stop)</code></p> <p><code>.inOutBack(counter, start, stop, option)</code></p> <p></p>"},{"location":"methods/inOutBack.html#parameters","title":"Parameters","text":"<p><code>counter</code> (float) an incremental value between 0 and <code>totalLength</code></p> <p><code>start</code> (float) the lowest desired output value</p> <p><code>stop</code> (float) the highest desired output value</p> <p><code>option</code> (String) either <code>\"loop\"</code> , <code>\"alternate\"</code> or <code>\"once\"</code></p> <p></p>"},{"location":"methods/inOutBack.html#return","title":"Return","text":"<p>float </p>"},{"location":"methods/inOutBack.html#related","title":"Related","text":"<ul> <li>.framer()</li> </ul>"},{"location":"methods/inOutBounce.html","title":".inOutBounce()","text":"ease - in - out Bounce"},{"location":"methods/inOutBounce.html#inoutbounce","title":"<code>.inOutBounce()</code>","text":""},{"location":"methods/inOutBounce.html#description","title":"Description","text":"<p>Calculates an ease-in-out-Bounce curve interpolation which starts slow, accelerates to full-speed at the midpoint, then progressively slows down toward the end,</p> <p>In case a custom value was set for <code>totalLength</code>, the <code>counter</code> parameter should be tuned accordingly. e.g. if the total totalLength value was set to <code>3.0</code> seconds, the function will expect the <code>counter</code> parameter to be an incremental value between <code>0.0</code> and <code>3.0</code></p> <p>It returns by default a nonlinear interpolation between <code>0.0</code> and <code>1.0</code> or in case <code>start</code> and <code>stop</code> parameter are being passed to the function, it returns an interpolation between those two values</p> <p>when using the <code>\"alternate\"</code> option, the function expects the <code>counter</code> to be between <code>0.0</code> and twice the <code>totalLength</code></p> <p></p>"},{"location":"methods/inOutBounce.html#example","title":"Example","text":"Ease_inOutBounce.pde<pre><code>import easy.ease.*;\n\nfloat intensity = 4.0;\nfloat totalLength = 2;\nfloat span = 1.5;\nfloat delay = 0.25;\nEasyEase curve = new EasyEase(this, intensity, totalLength, span, delay);\n\nvoid setup() {\n  size(600, 400);\n}\n\nvoid draw() {\n  background(#f1f1f1);\n  fill(#ff0000);\n\n  float mot_counter = curve.framer(frameCount);\n  float x = curve.inOutBounce(mot_counter ) * (width-100);\n  rect(x, 0, 100, width);\n}\n</code></pre> <p>Ease_in_out_bounce.pde</p> <p></p>"},{"location":"methods/inOutBounce.html#syntax","title":"Syntax","text":"<p><code>.inOutBounce(counter)</code></p> <p><code>.inOutBounce(counter,option)</code></p> <p><code>.inOutBounce(counter, start, stop)</code></p> <p><code>.inOutBounce(counter, start, stop, option)</code></p> <p></p>"},{"location":"methods/inOutBounce.html#parameters","title":"Parameters","text":"<p><code>counter</code> (float) an incremental value between 0 and <code>totalLength</code></p> <p><code>start</code> (float) the lowest desired output value</p> <p><code>stop</code> (float) the highest desired output value</p> <p><code>option</code> (String) either <code>\"loop\"</code> , <code>\"alternate\"</code> or <code>\"once\"</code></p> <p></p>"},{"location":"methods/inOutBounce.html#return","title":"Return","text":"<p>float</p> <p></p>"},{"location":"methods/inOutBounce.html#related","title":"Related","text":"<ul> <li>.framer()</li> </ul>"},{"location":"methods/inOutCirc.html","title":".inOutCirc()","text":"ease - in - out Circ"},{"location":"methods/inOutCirc.html#inoutcirc","title":"<code>.inOutCirc()</code>","text":""},{"location":"methods/inOutCirc.html#description","title":"Description","text":"<p>Calculates an ease-in-out-Circ curve interpolation which starts slow, accelerates to full-speed at the midpoint, then progressively slows down toward the end,</p> <p>In case a custom value was set for <code>totalLength</code>, the <code>counter</code> parameter should be tuned accordingly. e.g. if the total totalLength value was set to <code>3.0</code> seconds, the function will expect the <code>counter</code> parameter to be an incremental value between <code>0.0</code> and <code>3.0</code></p> <p>It returns by default a nonlinear interpolation between <code>0.0</code> and <code>1.0</code> or in case <code>start</code> and <code>stop</code> parameter are being passed to the function, it returns an interpolation between those two values</p> <p>when using the <code>\"alternate\"</code> option, the function expects the <code>counter</code> to be between <code>0.0</code> and twice the <code>totalLength</code></p> <p></p>"},{"location":"methods/inOutCirc.html#example","title":"Example","text":"Ease_inOutCirc.pde<pre><code>import easy.ease.*;\n\nfloat intensity = 4.0;\nfloat totalLength = 2;\nfloat span = 1.5;\nfloat delay = 0.25;\nEasyEase curve = new EasyEase(this, intensity, totalLength, span, delay);\n\nvoid setup() {\n  size(600, 400);\n}\n\nvoid draw() {\n  background(#f1f1f1);\n  fill(#ff0000);\n\n  float mot_counter = curve.framer(frameCount);\n  float x = curve.inOutCirc(mot_counter ) * (width-100);\n  rect(x, 0, 100, width);\n}\n</code></pre> <p>Ease_in_out_circ.pde</p> <p></p>"},{"location":"methods/inOutCirc.html#syntax","title":"Syntax","text":"<p><code>.inOutCirc(counter)</code></p> <p><code>.inOutCirc(counter,option)</code></p> <p><code>.inOutCirc(counter, start, stop)</code></p> <p><code>.inOutCirc(counter, start, stop, option)</code></p> <p></p>"},{"location":"methods/inOutCirc.html#parameters","title":"Parameters","text":"<p><code>counter</code> (float) an incremental value between 0 and <code>totalLength</code></p> <p><code>start</code> (float) the lowest desired output value</p> <p><code>stop</code> (float) the highest desired output value</p> <p><code>option</code> (String) either <code>\"loop\"</code> , <code>\"alternate\"</code> or <code>\"once\"</code></p> <p></p>"},{"location":"methods/inOutCirc.html#return","title":"Return","text":"<p>float</p>"},{"location":"methods/inOutCirc.html#related","title":"Related","text":"<ul> <li>.framer()</li> </ul>"},{"location":"methods/inOutElastic.html","title":".inOutElastic()","text":"ease - in - out Elastic"},{"location":"methods/inOutElastic.html#inoutelastic","title":"<code>.inOutElastic()</code>","text":""},{"location":"methods/inOutElastic.html#description","title":"Description","text":"<p>Calculates an ease-in-out-Elastic curve interpolation which starts slow, accelerates to full-speed at the midpoint, then progressively slows down toward the end,</p> <p>In case a custom value was set for <code>totalLength</code>, the <code>counter</code> parameter should be tuned accordingly. e.g. if the total totalLength value was set to <code>3.0</code> seconds, the function will expect the <code>counter</code> parameter to be an incremental value between <code>0.0</code> and <code>3.0</code></p> <p>It returns by default a nonlinear interpolation between <code>0.0</code> and <code>1.0</code> or in case <code>start</code> and <code>stop</code> parameter are being passed to the function, it returns an interpolation between those two values</p> <p>when using the <code>\"alternate\"</code> option, the function expects the <code>counter</code> to be between <code>0.0</code> and twice the <code>totalLength</code></p> <p></p>"},{"location":"methods/inOutElastic.html#example","title":"Example","text":"Ease_inOutElastic.pde<pre><code>import easy.ease.*;\n\nfloat intensity = 4.0;\nfloat totalLength = 2;\nfloat span = 1.5;\nfloat delay = 0.25;\nEasyEase curve = new EasyEase(this, intensity, totalLength, span, delay);\n\nvoid setup() {\n  size(600, 400);\n}\n\nvoid draw() {\n  background(#f1f1f1);\n  fill(#ff0000);\n\n  float mot_counter = curve.framer(frameCount);\n  float x = curve.inOutElastic(mot_counter ) * (width-100);\n  rect(x, 0, 100, width);\n}\n</code></pre> <p>Ease_in_out_elastic.pde</p> <p></p>"},{"location":"methods/inOutElastic.html#syntax","title":"Syntax","text":"<p><code>.inOutElastic(counter)</code></p> <p><code>.inOutElastic(counter,option)</code></p> <p><code>.inOutElastic(counter, start, stop)</code></p> <p><code>.inOutElastic(counter, start, stop, option)</code></p> <p></p>"},{"location":"methods/inOutElastic.html#parameters","title":"Parameters","text":"<p><code>counter</code> (float) an incremental value between 0 and <code>totalLength</code></p> <p><code>start</code> (float) the lowest desired output value</p> <p><code>stop</code> (float) the highest desired output value</p> <p><code>option</code> (String) either <code>\"loop\"</code> , <code>\"alternate\"</code> or <code>\"once\"</code></p> <p></p>"},{"location":"methods/inOutElastic.html#return","title":"Return","text":"<p><code>float</code></p>"},{"location":"methods/inOutElastic.html#related","title":"Related","text":"<ul> <li>.framer()</li> </ul>"},{"location":"methods/inOutExpo.html","title":".inOut()","text":"ease - in - out Exponential"},{"location":"methods/inOutExpo.html#inout","title":"<code>.inOut()</code>","text":""},{"location":"methods/inOutExpo.html#description","title":"Description","text":"<p>Calculates an ease-in-out-Exponential curve interpolation which starts slow, accelerates to full-speed at the midpoint, then progressively slows down toward the end,</p> <p>In case a custom value was set for <code>totalLength</code>, the <code>counter</code> parameter should be tuned accordingly. e.g. if the total totalLength value was set to <code>3.0</code> seconds, the function will expect the <code>counter</code> parameter to be an incremental value between <code>0.0</code> and <code>3.0</code></p> <p>It returns by default a nonlinear interpolation between <code>0.0</code> and <code>1.0</code> or in case <code>start</code> and <code>stop</code> parameter are being passed to the function, it returns an interpolation between those two values</p> <p>when using the <code>\"alternate\"</code> option, the function expects the <code>counter</code> to be between <code>0.0</code> and twice the <code>totalLength</code></p> <p></p>"},{"location":"methods/inOutExpo.html#example","title":"Example","text":"Ease_inOut.pde<pre><code>import easy.ease.*;\n\nfloat intensity = 4.0;\nfloat totalLength = 2;\nfloat span = 1.5;\nfloat delay = 0.25;\nEasyEase curve = new EasyEase(this, intensity, totalLength, span, delay);\n\nvoid setup() {\n  size(600, 400);\n}\n\nvoid draw() {\n  background(#f1f1f1);\n  fill(#ff0000);\n\n  float mot_counter = curve.framer(frameCount);\n  float x = curve.inOut(mot_counter ) * (width-100);\n  rect(x, 0, 100, width);\n}\n</code></pre> <p>Ease_in_out.pde</p> <p></p>"},{"location":"methods/inOutExpo.html#syntax","title":"Syntax","text":"<p><code>.inOut(counter)</code></p> <p><code>.inOut(counter,option)</code></p> <p><code>.inOut(counter, start, stop)</code></p> <p><code>.inOut(counter, start, stop, option)</code></p> <p></p>"},{"location":"methods/inOutExpo.html#parameters","title":"Parameters","text":"<p><code>counter</code> (float) an incremental value between 0 and <code>totalLength</code></p> <p><code>start</code> (float) the lowest desired output value</p> <p><code>stop</code> (float) the highest desired output value</p> <p><code>option</code> (String) either <code>\"loop\"</code> , <code>\"alternate\"</code> or <code>\"once\"</code></p> <p></p>"},{"location":"methods/inOutExpo.html#return","title":"Return","text":"<p>float </p>"},{"location":"methods/inOutExpo.html#related","title":"Related","text":"<ul> <li>.framer()</li> </ul>"},{"location":"methods/inOutSine.html","title":".inOutSine()","text":"ease - in - out Sine"},{"location":"methods/inOutSine.html#inoutsine","title":"<code>.inOutSine()</code>","text":"<p>&lt; br&gt;</p>"},{"location":"methods/inOutSine.html#description","title":"Description","text":"<p>Calculates an ease-in-out-Sinusoidal curve interpolation which starts slow, accelerates to full-speed at the midpoint, then progressively slows down toward the end,</p> <p>In case a custom value was set for <code>totalLength</code>, the <code>counter</code> parameter should be tuned accordingly. e.g. if the total totalLength value was set to <code>3.0</code> seconds, the function will expect the <code>counter</code> parameter to be an incremental value between <code>0.0</code> and <code>3.0</code></p> <p>It returns by default a nonlinear interpolation between <code>0.0</code> and <code>1.0</code> or in case <code>start</code> and <code>stop</code> parameter are being passed to the function, it returns an interpolation between those two values</p> <p>when using the <code>\"alternate\"</code> option, the function expects the <code>counter</code> to be between <code>0.0</code> and twice the <code>totalLength</code></p> <p></p>"},{"location":"methods/inOutSine.html#example","title":"Example","text":"Ease_inOutSine.pde<pre><code>import easy.ease.*;\n\nfloat intensity = 4.0;\nfloat totalLength = 2;\nfloat span = 1.5;\nfloat delay = 0.25;\nEasyEase curve = new EasyEase(this, intensity, totalLength, span, delay);\n\nvoid setup() {\n  size(600, 400);\n}\n\nvoid draw() {\n  background(#f1f1f1);\n  fill(#ff0000);\n\n  float mot_counter = curve.framer(frameCount);\n  float x = curve.inOutSine(mot_counter ) * (width-100);\n  rect(x, 0, 100, width);\n}\n</code></pre> <p>Ease_in_out_sine.pde</p> <p></p>"},{"location":"methods/inOutSine.html#syntax","title":"Syntax","text":"<p><code>.inOutSine(counter)</code></p> <p><code>.inOutSine(counter,option)</code></p> <p><code>.inOutSine(counter, start, stop)</code></p> <p><code>.inOutSine(counter, start, stop, option)</code></p> <p></p>"},{"location":"methods/inOutSine.html#parameters","title":"Parameters","text":"<p><code>counter</code> (float) an incremental value between 0 and <code>totalLength</code></p> <p><code>start</code> (float) the lowest desired output value</p> <p><code>stop</code> (float) the highest desired output value</p> <p><code>option</code> (String) either <code>\"loop\"</code> , <code>\"alternate\"</code> or <code>\"once\"</code></p> <p></p>"},{"location":"methods/inOutSine.html#return","title":"Return","text":"<p>float &lt; br&gt;</p>"},{"location":"methods/inOutSine.html#related","title":"Related","text":"<ul> <li>.framer()</li> </ul>"},{"location":"methods/inSine.html","title":".inSine()","text":"ease - in Sinusoidal"},{"location":"methods/inSine.html#insine","title":"<code>.inSine()</code>","text":""},{"location":"methods/inSine.html#description","title":"Description","text":"<p>Calculates an ease-in-Sinusoidal curve interpolation which starts slowly and progressively speeds up,</p> <p>In case a custom value was set for <code>totalLength</code>, the <code>counter</code> parameter should be tuned accordingly. e.g. if the total totalLength value was set to <code>3.0</code> seconds, the function will expect the <code>counter</code> parameter to be an incremental value between <code>0.0</code> and <code>3.0</code></p> <p>It returns by default a nonlinear interpolation between <code>0.0</code> and <code>1.0</code> or in case <code>start</code> and <code>stop</code> parameter are being passed to the function, it returns an interpolation between those two values</p> <p>when using the <code>\"alternate\"</code> option, the function expects the <code>counter</code> to be between <code>0.0</code> and twice the <code>totalLength</code></p> <p></p>"},{"location":"methods/inSine.html#example","title":"Example","text":"Ease_inSine.pde<pre><code>import easy.ease.*;\n\nfloat intensity = 4.0;\nfloat totalLength = 2;\nfloat span = 1.5;\nfloat delay = 0.25;\nEasyEase curve = new EasyEase(this, intensity, totalLength, span, delay);\n\nvoid setup() {\n  size(600, 400);\n}\n\nvoid draw() {\n  background(#f1f1f1);\n  fill(#ff0000);\n\n  float mot_counter = curve.framer(frameCount);\n  float x = curve.inSine(mot_counter ) * (width-100);\n  rect(x, 0, 100, width);\n}\n</code></pre> <p>Ease_in_sine.pde</p> <p></p>"},{"location":"methods/inSine.html#syntax","title":"Syntax","text":"<p><code>.inSine(counter)</code></p> <p><code>.inSine(counter,option)</code></p> <p><code>.inSine(counter, start, stop)</code></p> <p><code>.inSine(counter, start, stop, option)</code></p> <p></p>"},{"location":"methods/inSine.html#parameters","title":"Parameters","text":"<p><code>counter</code> (float) an incremental value between 0 and <code>totalLength</code></p> <p><code>start</code> (float) the lowest desired output value</p> <p><code>stop</code> (float) the highest desired output value</p> <p><code>option</code> (String) either <code>\"loop\"</code> , <code>\"alternate\"</code> or <code>\"once\"</code></p> <p></p>"},{"location":"methods/inSine.html#return","title":"Return","text":"<p>float </p>"},{"location":"methods/inSine.html#related","title":"Related","text":"<ul> <li>.framer()</li> </ul>"},{"location":"methods/outBack.html","title":".outBack()","text":"ease -  out Back"},{"location":"methods/outBack.html#outback","title":"<code>.outBack()</code>","text":""},{"location":"methods/outBack.html#description","title":"Description","text":"<p>Calculates an ease-out curve interpolation which starts fast and progressively slow down,</p> <p>In case a custom value was set for <code>totalLength</code>, the <code>counter</code> parameter should be tuned accordingly. e.g. if the total totalLength value was set to <code>3.0</code> seconds, the function will expect the <code>counter</code> parameter to be an incremental value between <code>0.0</code> and <code>3.0</code></p> <p>It returns by default a nonlinear interpolation between <code>0.0</code> and <code>1.0</code> or in case <code>start</code> and <code>stop</code> parameter are being passed to the function, it returns an interpolation between those two values</p> <p>when using the <code>\"alternate\"</code> option, the function expects the <code>counter</code> to be between <code>0.0</code> and twice the <code>totalLength</code></p> <p></p>"},{"location":"methods/outBack.html#example","title":"Example","text":"Ease_outBack.pde<pre><code>import easy.ease.*;\n\nfloat intensity = 4.0;\nfloat totalLength = 2;\nfloat span = 1.5;\nfloat delay = 0.25;\nEasyEase curve = new EasyEase(this, intensity, totalLength, span, delay);\n\nvoid setup() {\n  size(600, 400);\n}\n\nvoid draw() {\n  background(#f1f1f1);\n  fill(#ff0000);\n\n  float mot_counter = curve.framer(frameCount);\n  float x = curve.outBack(mot_counter ) * (width-100);\n  rect(x, 0, 100, width);\n}\n</code></pre> <p>Ease_out_back.pde</p> <p></p>"},{"location":"methods/outBack.html#syntax","title":"Syntax","text":"<p><code>.outBack(counter)</code></p> <p><code>.outBack(counter,option)</code></p> <p><code>.outBack(counter, start, stop)</code></p> <p><code>.outBack(counter, start, stop, option)</code></p> <p></p>"},{"location":"methods/outBack.html#parameters","title":"Parameters","text":"<p><code>counter</code> (float) an incremental value between 0 and <code>totalLength</code></p> <p><code>start</code> (float) the lowest desired output value</p> <p><code>stop</code> (float) the highest desired output value</p> <p><code>option</code> (String) either <code>\"loop\"</code> , <code>\"alternate\"</code> or <code>\"once\"</code></p> <p></p>"},{"location":"methods/outBack.html#return","title":"Return","text":"<p>float</p> <p></p>"},{"location":"methods/outBack.html#related","title":"Related","text":"<ul> <li>.framer()</li> </ul>"},{"location":"methods/outBounce.html","title":".outBounce()","text":"ease - out Bounce"},{"location":"methods/outBounce.html#outbounce","title":"<code>.outBounce()</code>","text":""},{"location":"methods/outBounce.html#description","title":"Description","text":"<p>Calculates an ease-out-Bounce curve interpolation which starts fast and progressively slow down,</p> <p>In case a custom value was set for <code>totalLength</code>, the <code>counter</code> parameter should be tuned accordingly. e.g. if the total totalLength value was set to <code>3.0</code> seconds, the function will expect the <code>counter</code> parameter to be an incremental value between <code>0.0</code> and <code>3.0</code></p> <p>It returns by default a nonlinear interpolation between <code>0.0</code> and <code>1.0</code> or in case <code>start</code> and <code>stop</code> parameter are being passed to the function, it returns an interpolation between those two values</p> <p>when using the <code>\"alternate\"</code> option, the function expects the <code>counter</code> to be between <code>0.0</code> and twice the <code>totalLength</code></p> <p></p>"},{"location":"methods/outBounce.html#example","title":"Example","text":"Ease_outBounce.pde<pre><code>import easy.ease.*;\n\nfloat intensity = 4.0;\nfloat totalLength = 2;\nfloat span = 1.5;\nfloat delay = 0.25;\nEasyEase curve = new EasyEase(this, intensity, totalLength, span, delay);\n\nvoid setup() {\n  size(600, 400);\n}\n\nvoid draw() {\n  background(#f1f1f1);\n  fill(#ff0000);\n\n  float mot_counter = curve.framer(frameCount);\n  float x = curve.outBounce(mot_counter ) * (width-100);\n  rect(x, 0, 100, width);\n}\n</code></pre> <p>Ease_out_bounce.pde</p> <p></p>"},{"location":"methods/outBounce.html#syntax","title":"Syntax","text":"<p><code>.outBounce(counter)</code></p> <p><code>.outBounce(counter,option)</code></p> <p><code>.outBounce(counter, start, stop)</code></p> <p><code>.outBounce(counter, start, stop, option)</code></p> <p></p>"},{"location":"methods/outBounce.html#parameters","title":"Parameters","text":"<p><code>counter</code> (float) an incremental value between 0 and <code>totalLength</code></p> <p><code>start</code> (float) the lowest desired output value</p> <p><code>stop</code> (float) the highest desired output value</p> <p><code>option</code> (String) either <code>\"loop\"</code> , <code>\"alternate\"</code> or <code>\"once\"</code></p> <p></p>"},{"location":"methods/outBounce.html#return","title":"Return","text":"<p>float</p>"},{"location":"methods/outBounce.html#related","title":"Related","text":"<ul> <li>.framer()</li> </ul>"},{"location":"methods/outCirc.html","title":".outCirc()","text":"ease - out Circular"},{"location":"methods/outCirc.html#outcirc","title":"<code>.outCirc()</code>","text":""},{"location":"methods/outCirc.html#description","title":"Description","text":"<p>Calculates an ease-out-Circ curve interpolation which starts fast and progressively slow down,</p> <p>In case a custom value was set for <code>totalLength</code>, the <code>counter</code> parameter should be tuned accordingly. e.g. if the total totalLength value was set to <code>3.0</code> seconds, the function will expect the <code>counter</code> parameter to be an incremental value between <code>0.0</code> and <code>3.0</code></p> <p>It returns by default a nonlinear interpolation between <code>0.0</code> and <code>1.0</code> or in case <code>start</code> and <code>stop</code> parameter are being passed to the function, it returns an interpolation between those two values</p> <p>when using the <code>\"alternate\"</code> option, the function expects the <code>counter</code> to be between <code>0.0</code> and twice the <code>totalLength</code></p> <p></p>"},{"location":"methods/outCirc.html#example","title":"Example","text":"Ease_outCirc.pde<pre><code>import easy.ease.*;\n\nfloat intensity = 4.0;\nfloat totalLength = 2;\nfloat span = 1.5;\nfloat delay = 0.25;\nEasyEase curve = new EasyEase(this, intensity, totalLength, span, delay);\n\nvoid setup() {\n  size(600, 400);\n}\n\nvoid draw() {\n  background(#f1f1f1);\n  fill(#ff0000);\n\n  float mot_counter = curve.framer(frameCount);\n  float x = curve.outCirc(mot_counter ) * (width-100);\n  rect(x, 0, 100, width);\n}\n</code></pre> <p>Ease_out_circ.pde</p> <p></p>"},{"location":"methods/outCirc.html#syntax","title":"Syntax","text":"<p><code>.outCirc(counter)</code></p> <p><code>.outCirc(counter,option)</code></p> <p><code>.outCirc(counter, start, stop)</code></p> <p><code>.outCirc(counter, start, stop, option)</code></p> <p></p>"},{"location":"methods/outCirc.html#parameters","title":"Parameters","text":"<p><code>counter</code> (float) an incremental value between 0 and <code>totalLength</code></p> <p><code>start</code> (float) the lowest desired output value</p> <p><code>stop</code> (float) the highest desired output value</p> <p><code>option</code> (String) either <code>\"loop\"</code> , <code>\"alternate\"</code> or <code>\"once\"</code></p> <p></p>"},{"location":"methods/outCirc.html#return","title":"Return","text":"<p>float</p>"},{"location":"methods/outCirc.html#related","title":"Related","text":"<ul> <li>.framer()</li> </ul>"},{"location":"methods/outElastic.html","title":".outElastic()","text":"ease - out Elastic"},{"location":"methods/outElastic.html#outelastic","title":"<code>.outElastic()</code>","text":""},{"location":"methods/outElastic.html#description","title":"Description","text":"<p>Calculates an ease-out-Elastic curve interpolation which starts fast and progressively slow down,</p> <p>In case a custom value was set for <code>totalLength</code>, the <code>counter</code> parameter should be tuned accordingly. e.g. if the total totalLength value was set to <code>3.0</code> seconds, the function will expect the <code>counter</code> parameter to be an incremental value between <code>0.0</code> and <code>3.0</code></p> <p>It returns by default a nonlinear interpolation between <code>0.0</code> and <code>1.0</code> or in case <code>start</code> and <code>stop</code> parameter are being passed to the function, it returns an interpolation between those two values</p> <p>when using the <code>\"alternate\"</code> option, the function expects the <code>counter</code> to be between <code>0.0</code> and twice the <code>totalLength</code></p> <p></p>"},{"location":"methods/outElastic.html#example","title":"Example","text":"Ease_outElastic.pde<pre><code>import easy.ease.*;\n\nfloat intensity = 4.0;\nfloat totalLength = 2;\nfloat span = 1.5;\nfloat delay = 0.25;\nEasyEase curve = new EasyEase(this, intensity, totalLength, span, delay);\n\nvoid setup() {\n  size(600, 400);\n}\n\nvoid draw() {\n  background(#f1f1f1);\n  fill(#ff0000);\n\n  float mot_counter = curve.framer(frameCount);\n  float x = curve.outElastic(mot_counter ) * (width-100);\n  rect(x, 0, 100, width);\n}\n</code></pre> <p>Ease_out_elastic.pde</p> <p></p>"},{"location":"methods/outElastic.html#syntax","title":"Syntax","text":"<p><code>.outElastic(counter)</code></p> <p><code>.outElastic(counter,option)</code></p> <p><code>.outElastic(counter, start, stop)</code></p> <p><code>.outElastic(counter, start, stop, option)</code></p> <p></p>"},{"location":"methods/outElastic.html#parameters","title":"Parameters","text":"<p><code>counter</code> (float) an incremental value between 0 and <code>totalLength</code></p> <p><code>start</code> (float) the lowest desired output value</p> <p><code>stop</code> (float) the highest desired output value</p> <p><code>option</code> (String) either <code>\"loop\"</code> , <code>\"alternate\"</code> or <code>\"once\"</code></p> <p></p>"},{"location":"methods/outElastic.html#return","title":"Return","text":"<p>float</p> <p></p>"},{"location":"methods/outElastic.html#related","title":"Related","text":"<ul> <li>.framer()</li> </ul>"},{"location":"methods/outExpo.html","title":".out()","text":"ease - out Exponential"},{"location":"methods/outExpo.html#out","title":"<code>.out()</code>","text":""},{"location":"methods/outExpo.html#description","title":"Description","text":"<p>Calculates an ease-out-Exponential curve interpolation which starts fast and progressively slow down,</p> <p>In case a custom value was set for <code>totalLength</code>, the <code>counter</code> parameter should be tuned accordingly. e.g. if the total totalLength value was set to <code>3.0</code> seconds, the function will expect the <code>counter</code> parameter to be an incremental value between <code>0.0</code> and <code>3.0</code></p> <p>It returns by default a nonlinear interpolation between <code>0.0</code> and <code>1.0</code> or in case <code>start</code> and <code>stop</code> parameter are being passed to the function, it returns an interpolation between those two values</p> <p>when using the <code>\"alternate\"</code> option, the function expects the <code>counter</code> to be between <code>0.0</code> and twice the <code>totalLength</code></p> <p></p>"},{"location":"methods/outExpo.html#example","title":"Example","text":"Ease_out.pde<pre><code>import easy.ease.*;\n\nfloat intensity = 4.0;\nfloat totalLength = 2;\nfloat span = 1.5;\nfloat delay = 0.25;\nEasyEase curve = new EasyEase(this, intensity, totalLength, span, delay);\n\nvoid setup() {\n  size(600, 400);\n}\n\nvoid draw() {\n  background(#f1f1f1);\n  fill(#ff0000);\n\n  float mot_counter = curve.framer(frameCount);\n  float x = curve.out(mot_counter ) * (width-100);\n  rect(x, 0, 100, width);\n}\n</code></pre> <p>Ease_out.pde</p> <p></p>"},{"location":"methods/outExpo.html#syntax","title":"Syntax","text":"<p><code>.out(counter)</code></p> <p><code>.out(counter,option)</code></p> <p><code>.out(counter, start, stop)</code></p> <p><code>.out(counter, start, stop, option)</code></p> <p></p>"},{"location":"methods/outExpo.html#parameters","title":"Parameters","text":"<p><code>counter</code> (float) an incremental value between 0 and <code>totalLength</code></p> <p><code>start</code> (float) the lowest desired output value</p> <p><code>stop</code> (float) the highest desired output value</p> <p><code>option</code> (String) either <code>\"loop\"</code> , <code>\"alternate\"</code> or <code>\"once\"</code></p> <p></p>"},{"location":"methods/outExpo.html#return","title":"Return","text":"<p>float</p>"},{"location":"methods/outExpo.html#related","title":"Related","text":"<ul> <li>.framer()</li> </ul>"},{"location":"methods/outSine.html","title":".outSine()","text":"ease - out Sinusoidal"},{"location":"methods/outSine.html#outsine","title":"<code>.outSine()</code>","text":""},{"location":"methods/outSine.html#description","title":"Description","text":"<p>Calculates an ease-out-Sinusoidal curve interpolation which starts fast and progressively slow down,</p> <p>In case a custom value was set for <code>totalLength</code>, the <code>counter</code> parameter should be tuned accordingly. e.g. if the  total  totalLength value was set to <code>3.0</code> seconds, the function will expect the <code>counter</code> parameter to be an incremental value between <code>0.0</code> and <code>3.0</code></p> <p>It returns by default a nonlinear interpolation between <code>0.0</code> and <code>1.0</code> or  in case <code>start</code> and <code>stop</code> parameter are being passed to the function, it returns an interpolation between those two values</p> <p>when using the <code>\"alternate\"</code> option,  the function expects the <code>counter</code> to be   between <code>0.0</code> and twice the <code>totalLength</code></p> <p></p>"},{"location":"methods/outSine.html#example","title":"Example","text":"Ease_outSine.pde<pre><code>import easy.ease.*;\n\nfloat intensity = 4.0;\nfloat totalLength = 2;\nfloat span = 1.5;\nfloat delay = 0.25;\nEasyEase curve = new EasyEase(this, intensity, totalLength, span, delay);\n\nvoid setup() {\n  size(600, 400);\n}\n\nvoid draw() {\n  background(#f1f1f1);\n  fill(#ff0000);\n\n  float mot_counter = curve.framer(frameCount);\n  float x = curve.outSine(mot_counter ) * (width-100);\n  rect(x, 0, 100, width);\n}\n</code></pre> <p>Ease_out_sine.pde</p> <p></p>"},{"location":"methods/outSine.html#syntax","title":"Syntax","text":"<p><code>.outSine(counter)</code></p> <p><code>.outSine(counter,option)</code></p> <p><code>.outSine(counter, start, stop)</code></p> <p><code>.outSine(counter, start, stop, option)</code></p> <p></p>"},{"location":"methods/outSine.html#parameters","title":"Parameters","text":"<p><code>counter</code> (float) an incremental value between 0 and <code>totalLength</code></p> <p><code>start</code> (float) the lowest desired output value</p> <p><code>stop</code> (float) the highest desired output value</p> <p><code>option</code> (String) either <code>\"loop\"</code> , <code>\"alternate\"</code> or <code>\"once\"</code></p> <p></p>"},{"location":"methods/outSine.html#return","title":"Return","text":"<p>float</p> <p></p>"},{"location":"methods/outSine.html#related","title":"Related","text":"<ul> <li>.framer()</li> </ul>"},{"location":"methods/overviewTable.html","title":"Overview Table","text":""},{"location":"methods/overviewTable.html#of-all-available-easing-methods","title":"of all available Easing methods","text":"<p>The library offers flexible functional methods for each of the following kind of easing curves:</p> <ul> <li>Exponential</li> <li>Sinusoidal</li> <li>Circular</li> <li>Back</li> <li>Bounce</li> <li>Elastic</li> </ul> ease - in ease - out ease-in-out Exponential Back Circular Sinusoidal Elastic Bounce"},{"location":"tools/framer.html","title":"<code>.framer()</code>","text":""},{"location":"tools/framer.html#description","title":"Description","text":"<p>Converts the input frame count or any other incremetal value to seconds by dividing it by the current motion frame rate. This method is particularly useful for converting frame-based time values to a more intuitive time scale since it is based on seconds.</p> <p></p>"},{"location":"tools/framer.html#example","title":"Example","text":"framer_tool.pde<pre><code>import easy.ease.*;\n\nfloat intensity = 3.0;\nfloat totalLength = 4;\nfloat span = 2;\nfloat delay = 1;\nEasyEase   controlled = new EasyEase(this, intensity, totalLength, span, delay);\n\n\nvoid setup() {\n  size(600, 600);\n  rectMode(CENTER);\n  // the method getFramerate() returns the value of the\n  // EasyEase object own framerate\n  // default is 60.0 fps\n  //\n  // when setting a different sketch frameRate, is it important\n  // to call the  method setFrameRate(float value) as well\n  //\n  frameRate(60);\n  controlled.setFrameRate(60);\n\n  println(\"object\u00b4s frame rate: \"+controlled.getFrameRate());\n}\n\nvoid draw() {\n  background(#f1f1f1);\n  fill(#ff0000);\n  noStroke();\n  textSize(30);\n  textAlign(LEFT);\n\n  float count = controlled.framer(frameCount);\n  int seconds = floor(count);\n\n  text(seconds+\" seconds since the Sketch begin\", 50, height-50);\n\n  float start = 50;\n  float stop = width-50;\n\n  float x = controlled.inOut(count, start, stop, \"loop\" );\n\n  rect(x, height/2, 100, 100);\n}\n</code></pre>"},{"location":"tools/framer.html#syntax","title":"Syntax","text":"<pre><code>  myCurve.framer(count)\n</code></pre>"},{"location":"tools/framer.html#parameters","title":"Parameters","text":"<p><code>count</code> (float) input The frame count to be converted.</p> <p></p>"},{"location":"tools/framer.html#return","title":"Return","text":"<p>float</p> <p></p>"},{"location":"tools/framer.html#related","title":"Related","text":"<ul> <li>.setFrameRate()</li> </ul>"},{"location":"tools/getDelay.html","title":"<code>.getDelay()</code>","text":""},{"location":"tools/getDelay.html#description","title":"Description","text":"<p>when called this method returns the current delay value</p> <p></p>"},{"location":"tools/getDelay.html#example","title":"Example","text":"getDelay_01.pde<pre><code>import easy.ease.*;\n\nEasyEase curve = new EasyEase(this);\n\nvoid setup() {\n  size(600, 400);\n  println(curve.getDelay());\n}\n\n// prints 0.0 to the console\n</code></pre> getDelay_02.pde<pre><code>import easy.ease.*;\n\nEasyEase curve = new EasyEase(this, 4.0, 2.0, 1.5, 0.5);\n\nvoid setup() {\n  size(600, 400);\n  println(curve.getDelay());\n}\n\n// prints 0.5 to the console\n</code></pre>"},{"location":"tools/getDelay.html#syntax","title":"Syntax","text":"<pre><code>myCurve.getDelay(intensity)\n</code></pre>"},{"location":"tools/getDelay.html#return","title":"Return","text":"<p>float</p> <p></p>"},{"location":"tools/getDelay.html#related","title":"Related","text":"<ul> <li>.setDelay()</li> </ul>"},{"location":"tools/getFrameRate.html","title":"<code>.getFrameRate()</code>","text":""},{"location":"tools/getFrameRate.html#description","title":"Description","text":"<p>This function returns the <code>totalLength</code> value of an EasyEase Object.</p> <p></p>"},{"location":"tools/getFrameRate.html#examples","title":"Examples","text":"getFrameRate_01.pde<pre><code>import easy.ease.*;\n\nEasyEase curve = new EasyEase(this);\n\nvoid setup() {\n  size(600, 400);\n\n  // this will print 60 to the console\n  println(curve.getFrameRate());\n}\n</code></pre> getFrameRate_02.pde<pre><code>import easy.ease.*;\n\nEasyEase curve = new EasyEase(this);\n\nvoid setup() {\n  size(600, 400);\n\n    //when setting a different `frameRate` for the object,\n  //the sketch `frameRate` should be set accordingly\n  frameRate(10);\n  curve.setFrameRate(10);\n\n  // this will print 10 to the console\n  println(curve.getFrameRate());\n}\n</code></pre>"},{"location":"tools/getFrameRate.html#syntax","title":"Syntax","text":"<pre><code>myCurve.getTotalLength(intensity)\n</code></pre>"},{"location":"tools/getFrameRate.html#return","title":"Return","text":"<p>float</p> <p></p>"},{"location":"tools/getFrameRate.html#related","title":"Related","text":"<ul> <li>.setTotalLength() </li> </ul>"},{"location":"tools/getIntensity.html","title":"<code>.getIntensity()</code>","text":""},{"location":"tools/getIntensity.html#description","title":"Description","text":"<p>This function returns the current exponential <code>intensity</code> value of an EasyEase Object.</p> <p></p>"},{"location":"tools/getIntensity.html#examples","title":"Examples","text":"getIntensity_01.pde<pre><code>import easy.ease.*;\n\nEasyEase curve = new EasyEase(this, 4.0);\n\nvoid setup() {\n    size(600, 400);\n\n    // prints 4.0 to the console\n    println(curve.getIntensity());\n}\n</code></pre> getIntensity_02.pde<pre><code>import easy.ease.*;\n\nEasyEase curve = new EasyEase(this);\n\nvoid setup() {\n  size(600, 400);\n\n  // prints 1.0 to the console\n  println(curve.getIntensity());\n}\n</code></pre>"},{"location":"tools/getIntensity.html#syntax","title":"Syntax","text":"<pre><code>myCurve.getIntensity()\n</code></pre>"},{"location":"tools/getIntensity.html#return","title":"Return","text":"<p>float</p> <p></p>"},{"location":"tools/getIntensity.html#related","title":"Related","text":"<ul> <li>.setIntensity()</li> </ul>"},{"location":"tools/getSpan.html","title":"<code>.getSpan()</code>","text":""},{"location":"tools/getSpan.html#description","title":"Description","text":"<p>This function returns the current <code>span</code> value of an EasyEase Object.</p> <p></p>"},{"location":"tools/getSpan.html#examples","title":"Examples","text":"getSpan_01.pde<pre><code>import easy.ease.*;\n\nEasyEase curve = new EasyEase(this, 4.0);\n\nvoid setup() {\n    size(600, 400);\n\n    // prints 4.0 to the console\n    println(curve.getIntensity());\n}\n</code></pre> getSpan_02.pde<pre><code>import easy.ease.*;\n\nEasyEase curve = new EasyEase(this);\n\nvoid setup() {\n    size(600, 400);\n\n    //prints 1.0 to the console\n    println(curve.getIntensity());\n}\n</code></pre>"},{"location":"tools/getSpan.html#syntax","title":"Syntax","text":"<pre><code>myCurve.getSpan(intensity)\n</code></pre>"},{"location":"tools/getSpan.html#return","title":"Return","text":"<p>float</p> <p></p>"},{"location":"tools/getSpan.html#related","title":"Related","text":"<ul> <li>.setSpan()</li> </ul>"},{"location":"tools/getTotalLength.html","title":"<code>.getTotalLength()</code>","text":""},{"location":"tools/getTotalLength.html#description","title":"Description","text":"<p>This function returns the <code>totalLength</code> value of an EasyEase Object.</p> <p></p>"},{"location":"tools/getTotalLength.html#examples","title":"Examples","text":"getTotalLength_01.pde<pre><code>import easy.ease.*;\n\nEasyEase curve = new EasyEase(this);\n\nvoid setup() {\n  size(600, 400);\n\n  // prints 1.0 to the console\n  println(curve.getTotalLenght());\n}\n</code></pre> getTotalLength_02.pde<pre><code>import easy.ease.*;\n\nEasyEase curve = new EasyEase(this, 4.0, 2.0, 2.0, 0.0);\n\nvoid setup() {\n  size(600, 400);\n\n  // prints 2.0 to the console\n  println(curve.getTotalLenght());\n}\n</code></pre>"},{"location":"tools/getTotalLength.html#syntax","title":"Syntax","text":"<pre><code>myCurve.getTotalLength(intensity)\n</code></pre>"},{"location":"tools/getTotalLength.html#return","title":"Return","text":"<p>float</p> <p></p>"},{"location":"tools/getTotalLength.html#related","title":"Related","text":"<ul> <li>.setTotalLength()</li> </ul>"},{"location":"tools/linear.html","title":".linear()","text":"Linear motion"},{"location":"tools/linear.html#linear","title":"<code>.linear()</code>","text":""},{"location":"tools/linear.html#description","title":"Description","text":"<p>Calculates and return a linear interpolation</p> <p>This method expects values in a range between 0.0 and totalLength for the counter parameter.</p> <p>In case a custom value was set for totalLength, the counter parameter should be tuned accordingly.</p> <p>Although very similar to the other easing Methods, this function returns by default a linear interpolation between 0.0 and 1.0 or in case start and stop parameter are being passed to the function, it returns an interpolation between those two values</p> <p></p>"},{"location":"tools/linear.html#example","title":"Example","text":"linear_tool.pde<pre><code>import easy.ease.*;\n\nfloat intensity = 4.0;\nfloat totalLength = 2;\nfloat span = 1.5;\nfloat delay = 0.25;\nEasyEase curve = new EasyEase(this);\n\nvoid setup() {\n  size(600, 400);\n  curve.setTotalLength(totalLength);\n}\n\nvoid draw() {\n  background(#f1f1f1);\n  fill(#ff0000);\n\n  float mot_counter = curve.framer(frameCount);\n  float x = curve.linear(mot_counter ) * (width) -50;\n  rect(x, 0, 100, width);\n  rec(30,120);\n}\n</code></pre>"},{"location":"tools/linear.html#syntax","title":"Syntax","text":"<p><code>.linear(counter)</code></p> <p><code>.linear(counter,option)</code></p> <p><code>.linear(counter, start, stop)</code></p> <p><code>.linear(counter, start, stop, option)</code></p> <p></p>"},{"location":"tools/linear.html#parameters","title":"Parameters","text":"<p><code>counter</code> (float) an incremental value between 0 and totalLength</p> <p><code>start</code> (float) the lowest desired output value</p> <p><code>stop</code> (float) the highest desired output value</p> <p><code>option</code> (String) either <code>\"loop\"</code> , <code>\"alternate\"</code> or <code>\"once\"</code></p> <p></p>"},{"location":"tools/linear.html#return","title":"Return","text":"<p>float </p>"},{"location":"tools/linear.html#related","title":"Related","text":"<ul> <li>.framer()</li> </ul>"},{"location":"tools/setDelay.html","title":"<code>.setDelay()</code>","text":""},{"location":"tools/setDelay.html#description","title":"Description","text":"<p>This function is used to set a value for the <code>delay</code> variable of an EasyEase Object.</p> <p>It receives a float value which should be positive and may be greater or equal than 0.0;</p> <p></p>"},{"location":"tools/setDelay.html#example","title":"Example","text":"setDelay.pde<pre><code>import easy.ease.*;\nfloat totalLength = 2;\nEasyEase curve = new EasyEase(this, 5, 2, 1, 1);\nEasyEase reference = new EasyEase(this, 1, 2, 2, 0);\nvoid setup() {\n    size(600, 400);\n    textSize(30);\n}\n\nvoid draw() {\n    background(#f1f1f1);\n    stroke(#ff0000);\n    fill(#ff0000);\n    strokeWeight(5);\n    float start = 50;\n    float stopX = width - 50;\n    float stopY = 50;\n    float motor = curve.framer(frameCount);\n    float refX = constrain(mouseX, start, stopX);\n    float newDelay = map(refX, start, stopX, 0, totalLength);\n\n    //when calling setDelay inside of draw()\n    //setSpan() should also be called to ensure the\n    //motion span is tuned accordingly\n    curve.setDelay(newDelay);\n    curve.setSpan(totalLength - newDelay);\n\n    float ptCurve_X = curve.linear(motor, start, stopX);\n    float ptCurve_Y = curve.inOut(motor, height - 50, stopY);\n    ellipse(ptCurve_X, ptCurve_Y, 50, 50);\n\n    text(\"totalLength: \" + curve.getTotalLength() + \" sec.\", 340, 300);\n    text(\"delay:       \" + String.format(\"%.2f\", newDelay) + \" sec.\", 340, 350);\n\n    line(start, 380, stopX, 380);\n    line(refX, 370, refX, 390);\n\n    line(50, 20, reference.linear(motor, start, stopX), 20);\n}\n</code></pre> <p>setDelay.pde</p> <p></p>"},{"location":"tools/setDelay.html#syntax","title":"Syntax","text":"<pre><code>myCurve.setDelay(delay)\n</code></pre>"},{"location":"tools/setDelay.html#parameters","title":"Parameters","text":"<p><code>delay</code> (float) the amout of delay in seconds before the motion starts</p> <p></p>"},{"location":"tools/setDelay.html#return","title":"Return","text":"<p>void</p> <p></p>"},{"location":"tools/setDelay.html#related","title":"Related","text":"<ul> <li> <p>3rd Constructor</p> </li> <li> <p>.getDelay()</p> </li> <li> <p>.setTotalLenght()</p> </li> <li> <p>.setSpan()</p> </li> </ul> <p></p>"},{"location":"tools/setFrameRate.html","title":"<code>.setFrameRate()</code>","text":""},{"location":"tools/setFrameRate.html#description","title":"Description","text":"<p>Sets the the <code>frameRate_</code> for an EasyEase object using the provided value. The frameRate variable determines the speed at which the motion progresses. The function accepts either an an int or a float value, which should be a positive number greater than 1.</p> <p></p>"},{"location":"tools/setFrameRate.html#example","title":"Example","text":"setFrameRate.pde<pre><code>import easy.ease.*;\n\nEasyEase curve = new EasyEase(this, 5);\n\nvoid setup() {\n  size(600, 400);\n  textSize(30);\n  curve.setTotalLength(4);\n}\n\nvoid draw() {\n  background(#f1f1f1);\n  stroke(#ff0000);\n  fill(#ff0000);\n  strokeWeight(5);\n\n  float start = 50;\n  float stopX = width - 50;\n  float stopY = 50;\n  float motor = curve.framer(frameCount)%4;\n  float refX = constrain(width-mouseX, start, stopX);\n  float newFrameRate = int(map(refX, start, stopX, 2, 60));\n\n  //when setting a different `frameRate` for the object,\n  //the sketch `frameRate` should be set accordingly\n  frameRate(newFrameRate);\n  curve.setFrameRate(newFrameRate);\n\n  float ptCurve_X = curve.linear(motor, start, stopX) ;\n  float ptCurve_Y = curve.inOut(motor, height-50, stopY) ;\n\n  //drawing a circle moving along the curve\n\n  ellipse(ptCurve_X, ptCurve_Y, 50, 50 );\n  //indicators\n  text (\"frameRate: \"+String.format(\"%.2f\", newFrameRate)+\" fps.\", 340, 350);\n  text (\"time: \"+String.format(\"%.2f\", motor)+\" sec.\", 340, 320);\n\n  line(start, 380, stopX, 380);\n  line(refX, 370, refX, 390);\n\n  line(50, 20, curve.linear(motor, start, stopX), 20);\n}\n</code></pre> <p>setFrameRate.pde</p>  the gif  above runs @20fps and is only for demonstration purpose  <p></p>"},{"location":"tools/setFrameRate.html#syntax","title":"Syntax","text":"<pre><code>myCurve.setTotalLength(totalLenght)\n</code></pre>"},{"location":"tools/setFrameRate.html#parameters","title":"Parameters","text":"<p><code>totalLength</code> (float) the duration in seconds of the motion</p> <p></p>"},{"location":"tools/setFrameRate.html#return","title":"Return","text":"<p>void</p> <p></p>"},{"location":"tools/setFrameRate.html#related","title":"Related","text":"<ul> <li> <p>3rd Constructor</p> </li> <li> <p>.setSpan()</p> </li> <li> <p>.setDelay()</p> </li> <li> <p>.frameRate_</p> </li> </ul>"},{"location":"tools/setIntensity.html","title":"<code>.setIntensity()</code>","text":""},{"location":"tools/setIntensity.html#description","title":"Description","text":"<p>This function is used to set a value for the <code>intensity</code> variable of an EasyEase Object.</p> <p>Info</p> <p>the <code>intensity</code> parameter affects the result of the curve bending only for: Exponential, Back and Circular easing methods</p> <p></p>"},{"location":"tools/setIntensity.html#example","title":"Example","text":"setIntensity.pde<pre><code> import easy.ease.*;\n\nEasyEase curve = new EasyEase(this,1,1,1,0);\n\nvoid setup() {\n  size(600, 400);\n  textSize(30);\n}\n\nvoid draw() {\n  background(255);\n  stroke(#ff0000);\n  fill(#ff0000);\n  strokeWeight(5);\n\n  float start = 50;\n  float stopX = width - 50;\n  float stopY = 50;\n  float refX = constrain(width-mouseX, start, stopX);\n  float newIntensity = map(refX, start, stopX, -50, 50);\n\n  curve.setIntensity(newIntensity);\n\n  loadPixels();\n  for (float i = 0; i &lt; width; i++) {\n    for (float j = 0; j &lt; height; j++) {\n      int index = int(i + j * width);\n      color c = color( curve.inOut(i / width, 0, 255) );\n      pixels[index] = c;\n    }\n  }\n  updatePixels();\n\n  for (float i = 0; i &lt; 1; i+=0.01) {\n  float ptCurve_X = curve.linear(i, start, stopX) ;\n  float ptCurve_Y = curve.inOut(i, height-50, stopY) ;\n    point(ptCurve_X, ptCurve_Y );\n  }\n\n  text (\"intensity:\"+String.format(\"%.2f\", newIntensity), 390, 350);\n\n  line(start, 380, stopX, 380);\n  line(refX, 370, refX, 390);\n}\n</code></pre> <p>setIntensity.pde</p> <p></p>"},{"location":"tools/setIntensity.html#syntax","title":"Syntax","text":"<p><code>myCurve.setIntensity(intensity)</code></p> <p></p>"},{"location":"tools/setIntensity.html#parameters","title":"Parameters","text":"<p><code>intensity</code> (float) the exponetial factor of the curve</p> <p></p>"},{"location":"tools/setIntensity.html#return","title":"Return","text":"<p>void</p> <p></p>"},{"location":"tools/setIntensity.html#related","title":"Related","text":"<ul> <li> <p>2nd Constructor</p> </li> <li> <p>3rd Constructor</p> </li> <li> <p>.getIntensity()</p> </li> </ul> <p></p>"},{"location":"tools/setLog.html","title":"<code>.setLog()</code>","text":""},{"location":"tools/setLog.html#description","title":"Description","text":"<p>This function is used to enable/disable the console logs for the setter functions</p> <p></p>"},{"location":"tools/setLog.html#example","title":"Example","text":"setLog.pde"},{"location":"tools/setLog.html#syntax","title":"Syntax","text":"<p><code>myCurve.setLog(bool)</code></p> <p></p>"},{"location":"tools/setLog.html#parameters","title":"Parameters","text":"<p><code>bool</code> (boolean) either <code>true</code> or <code>false</code></p> <p></p>"},{"location":"tools/setLog.html#return","title":"Return","text":"<p>console log</p> <p></p>"},{"location":"tools/setSpan.html","title":"<code>.setSpan()</code>","text":""},{"location":"tools/setSpan.html#description","title":"Description","text":"<p>This function is used to set a value for the <code>span</code> variable of an EasyEase Object.</p> <p>It receives a float value which should be positive and should be greater than 0.0 and less or equal than <code>totalLength</code>;</p> <p></p>"},{"location":"tools/setSpan.html#example","title":"Example","text":"setSpan.pde<pre><code>import easy.ease.*;\n\nEasyEase curve = new EasyEase(this, 5);\nEasyEase reference = new EasyEase(this, 1, 2, 2, 0);\n\nvoid setup() {\n  size(600, 400);\n  textSize(30);\n  curve.setTotalLength(2.0);\n}\n\nvoid draw() {\n  background(#f1f1f1);\n  stroke(#ff0000);\n  fill(#ff0000);\n  strokeWeight(5);\n  float start = 50;\n  float stopX = width - 50;\n  float stopY = 50;\n  float motor = curve.framer(frameCount);\n  float refX = constrain(width-mouseX, start, stopX);\n  float newSpan = map(refX, 0, width, 0, 2);\n\n  curve.setSpan(newSpan);\n\n  float ptCurve_X = curve.linear(motor, start, stopX) ;\n  float ptCurve_Y = curve.inOut(motor, height-50, stopY) ;\n  ellipse(ptCurve_X, ptCurve_Y, 50, 50 );\n\n  text (\"totalLength: \"+curve.getTotalLength()+\" sec.\", 300, 300);\n  text (\"motion span: \"+String.format(\"%.2f\", newSpan)+\" sec.\", 300, 350);\n\n  line(start, 380, stopX, 380);\n  line(refX, 370, refX, 390);\n\n  line(50, 20, reference.linear(motor, start, stopX), 20);\n  rec(30, 900);\n}\n</code></pre> <p>setSpan.pde</p> <p></p>"},{"location":"tools/setSpan.html#syntax","title":"Syntax","text":"<pre><code>myCurve.setSpan(span)\n</code></pre>"},{"location":"tools/setSpan.html#parameters","title":"Parameters","text":"<p><code>span</code> (float) the motion span expressed in seconds</p> <p></p>"},{"location":"tools/setSpan.html#return","title":"Return","text":"<p>void</p> <p></p>"},{"location":"tools/setSpan.html#related","title":"Related","text":"<ul> <li> <p>3rd Constructor</p> </li> <li> <p>.getSpan()</p> </li> <li> <p>.setTotalLenght()</p> </li> <li> <p>.setDelay()</p> </li> </ul> <p></p>"},{"location":"tools/setTotalLength.html","title":"<code>.setTotalLength()</code>","text":""},{"location":"tools/setTotalLength.html#description","title":"Description","text":"<p>This function is used to set a value for the <code>totalLength</code> variable of an EasyEase Object expressed in seconds.</p> <p>It receives a float value which should positive and be greater than 0.0  to avoid unexpected results.</p> <p></p>"},{"location":"tools/setTotalLength.html#examples","title":"Examples","text":"setTotalLength.pde<pre><code>import easy.ease.*;\n\nEasyEase curve = new EasyEase(this, 5);\nEasyEase reference = new EasyEase(this, 1, 2, 2, 0);\n\nvoid setup() {\n    size(600, 400);\n    textSize(30);\n}\n\nvoid draw() {\n    background(#f1f1f1);\n    stroke(#ff0000);\n    fill(#ff0000);\n    strokeWeight(5);\n    float start = 50;\n    float stopX = width - 50;\n    float stopY = 50;\n    float motor = curve.framer(frameCount);\n    float refX = constrain(width - mouseX, start, stopX);\n    float newTotLength = map(refX, start, stopX, 0, 4);\n\n    curve.setTotalLength(newTotLength);\n\n    float ptCurve_X = curve.linear(motor, start, stopX);\n    float ptCurve_Y = curve.inOut(motor, height - 50, stopY);\n    ellipse(ptCurve_X, ptCurve_Y, 50, 50);\n\n    text(\"totalLength: \" + String.format(\"%.2f\", newTotLength) + \" sec.\", 300, 350);\n\n    line(start, 380, stopX, 380);\n    line(refX, 370, refX, 390);\n\n    line(50, 20, curve.linear(motor, start, stopX), 20);\n}\n</code></pre> <p>setTotalLength.pde</p> <p></p>"},{"location":"tools/setTotalLength.html#syntax","title":"Syntax","text":"<pre><code>myCurve.setTotalLength(totalLenght)\n</code></pre>"},{"location":"tools/setTotalLength.html#parameters","title":"Parameters","text":"<p><code>totalLenght</code> (float) the duration in seconds of the motion</p> <p></p>"},{"location":"tools/setTotalLength.html#return","title":"Return","text":"<p>void</p> <p></p>"},{"location":"tools/setTotalLength.html#related","title":"Related","text":"<ul> <li> <p>3rd Constructor</p> </li> <li> <p>.setSpan()</p> </li> <li> <p>.setDelay()</p> </li> </ul>"}]}